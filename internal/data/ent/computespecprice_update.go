// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computespecprice"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// ComputeSpecPriceUpdate is the builder for updating ComputeSpecPrice entities.
type ComputeSpecPriceUpdate struct {
	config
	hooks    []Hook
	mutation *ComputeSpecPriceMutation
}

// Where appends a list predicates to the ComputeSpecPriceUpdate builder.
func (cspu *ComputeSpecPriceUpdate) Where(ps ...predicate.ComputeSpecPrice) *ComputeSpecPriceUpdate {
	cspu.mutation.Where(ps...)
	return cspu
}

// SetFkComputeSpecID sets the "fk_compute_spec_id" field.
func (cspu *ComputeSpecPriceUpdate) SetFkComputeSpecID(i int32) *ComputeSpecPriceUpdate {
	cspu.mutation.ResetFkComputeSpecID()
	cspu.mutation.SetFkComputeSpecID(i)
	return cspu
}

// AddFkComputeSpecID adds i to the "fk_compute_spec_id" field.
func (cspu *ComputeSpecPriceUpdate) AddFkComputeSpecID(i int32) *ComputeSpecPriceUpdate {
	cspu.mutation.AddFkComputeSpecID(i)
	return cspu
}

// SetDay sets the "day" field.
func (cspu *ComputeSpecPriceUpdate) SetDay(i int32) *ComputeSpecPriceUpdate {
	cspu.mutation.ResetDay()
	cspu.mutation.SetDay(i)
	return cspu
}

// SetNillableDay sets the "day" field if the given value is not nil.
func (cspu *ComputeSpecPriceUpdate) SetNillableDay(i *int32) *ComputeSpecPriceUpdate {
	if i != nil {
		cspu.SetDay(*i)
	}
	return cspu
}

// AddDay adds i to the "day" field.
func (cspu *ComputeSpecPriceUpdate) AddDay(i int32) *ComputeSpecPriceUpdate {
	cspu.mutation.AddDay(i)
	return cspu
}

// SetPrice sets the "price" field.
func (cspu *ComputeSpecPriceUpdate) SetPrice(f float32) *ComputeSpecPriceUpdate {
	cspu.mutation.ResetPrice()
	cspu.mutation.SetPrice(f)
	return cspu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (cspu *ComputeSpecPriceUpdate) SetNillablePrice(f *float32) *ComputeSpecPriceUpdate {
	if f != nil {
		cspu.SetPrice(*f)
	}
	return cspu
}

// AddPrice adds f to the "price" field.
func (cspu *ComputeSpecPriceUpdate) AddPrice(f float32) *ComputeSpecPriceUpdate {
	cspu.mutation.AddPrice(f)
	return cspu
}

// Mutation returns the ComputeSpecPriceMutation object of the builder.
func (cspu *ComputeSpecPriceUpdate) Mutation() *ComputeSpecPriceMutation {
	return cspu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cspu *ComputeSpecPriceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cspu.sqlSave, cspu.mutation, cspu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cspu *ComputeSpecPriceUpdate) SaveX(ctx context.Context) int {
	affected, err := cspu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cspu *ComputeSpecPriceUpdate) Exec(ctx context.Context) error {
	_, err := cspu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cspu *ComputeSpecPriceUpdate) ExecX(ctx context.Context) {
	if err := cspu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cspu *ComputeSpecPriceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(computespecprice.Table, computespecprice.Columns, sqlgraph.NewFieldSpec(computespecprice.FieldID, field.TypeInt32))
	if ps := cspu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cspu.mutation.FkComputeSpecID(); ok {
		_spec.SetField(computespecprice.FieldFkComputeSpecID, field.TypeInt32, value)
	}
	if value, ok := cspu.mutation.AddedFkComputeSpecID(); ok {
		_spec.AddField(computespecprice.FieldFkComputeSpecID, field.TypeInt32, value)
	}
	if value, ok := cspu.mutation.Day(); ok {
		_spec.SetField(computespecprice.FieldDay, field.TypeInt32, value)
	}
	if value, ok := cspu.mutation.AddedDay(); ok {
		_spec.AddField(computespecprice.FieldDay, field.TypeInt32, value)
	}
	if value, ok := cspu.mutation.Price(); ok {
		_spec.SetField(computespecprice.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := cspu.mutation.AddedPrice(); ok {
		_spec.AddField(computespecprice.FieldPrice, field.TypeFloat32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cspu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{computespecprice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cspu.mutation.done = true
	return n, nil
}

// ComputeSpecPriceUpdateOne is the builder for updating a single ComputeSpecPrice entity.
type ComputeSpecPriceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ComputeSpecPriceMutation
}

// SetFkComputeSpecID sets the "fk_compute_spec_id" field.
func (cspuo *ComputeSpecPriceUpdateOne) SetFkComputeSpecID(i int32) *ComputeSpecPriceUpdateOne {
	cspuo.mutation.ResetFkComputeSpecID()
	cspuo.mutation.SetFkComputeSpecID(i)
	return cspuo
}

// AddFkComputeSpecID adds i to the "fk_compute_spec_id" field.
func (cspuo *ComputeSpecPriceUpdateOne) AddFkComputeSpecID(i int32) *ComputeSpecPriceUpdateOne {
	cspuo.mutation.AddFkComputeSpecID(i)
	return cspuo
}

// SetDay sets the "day" field.
func (cspuo *ComputeSpecPriceUpdateOne) SetDay(i int32) *ComputeSpecPriceUpdateOne {
	cspuo.mutation.ResetDay()
	cspuo.mutation.SetDay(i)
	return cspuo
}

// SetNillableDay sets the "day" field if the given value is not nil.
func (cspuo *ComputeSpecPriceUpdateOne) SetNillableDay(i *int32) *ComputeSpecPriceUpdateOne {
	if i != nil {
		cspuo.SetDay(*i)
	}
	return cspuo
}

// AddDay adds i to the "day" field.
func (cspuo *ComputeSpecPriceUpdateOne) AddDay(i int32) *ComputeSpecPriceUpdateOne {
	cspuo.mutation.AddDay(i)
	return cspuo
}

// SetPrice sets the "price" field.
func (cspuo *ComputeSpecPriceUpdateOne) SetPrice(f float32) *ComputeSpecPriceUpdateOne {
	cspuo.mutation.ResetPrice()
	cspuo.mutation.SetPrice(f)
	return cspuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (cspuo *ComputeSpecPriceUpdateOne) SetNillablePrice(f *float32) *ComputeSpecPriceUpdateOne {
	if f != nil {
		cspuo.SetPrice(*f)
	}
	return cspuo
}

// AddPrice adds f to the "price" field.
func (cspuo *ComputeSpecPriceUpdateOne) AddPrice(f float32) *ComputeSpecPriceUpdateOne {
	cspuo.mutation.AddPrice(f)
	return cspuo
}

// Mutation returns the ComputeSpecPriceMutation object of the builder.
func (cspuo *ComputeSpecPriceUpdateOne) Mutation() *ComputeSpecPriceMutation {
	return cspuo.mutation
}

// Where appends a list predicates to the ComputeSpecPriceUpdate builder.
func (cspuo *ComputeSpecPriceUpdateOne) Where(ps ...predicate.ComputeSpecPrice) *ComputeSpecPriceUpdateOne {
	cspuo.mutation.Where(ps...)
	return cspuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cspuo *ComputeSpecPriceUpdateOne) Select(field string, fields ...string) *ComputeSpecPriceUpdateOne {
	cspuo.fields = append([]string{field}, fields...)
	return cspuo
}

// Save executes the query and returns the updated ComputeSpecPrice entity.
func (cspuo *ComputeSpecPriceUpdateOne) Save(ctx context.Context) (*ComputeSpecPrice, error) {
	return withHooks(ctx, cspuo.sqlSave, cspuo.mutation, cspuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cspuo *ComputeSpecPriceUpdateOne) SaveX(ctx context.Context) *ComputeSpecPrice {
	node, err := cspuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cspuo *ComputeSpecPriceUpdateOne) Exec(ctx context.Context) error {
	_, err := cspuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cspuo *ComputeSpecPriceUpdateOne) ExecX(ctx context.Context) {
	if err := cspuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cspuo *ComputeSpecPriceUpdateOne) sqlSave(ctx context.Context) (_node *ComputeSpecPrice, err error) {
	_spec := sqlgraph.NewUpdateSpec(computespecprice.Table, computespecprice.Columns, sqlgraph.NewFieldSpec(computespecprice.FieldID, field.TypeInt32))
	id, ok := cspuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ComputeSpecPrice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cspuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, computespecprice.FieldID)
		for _, f := range fields {
			if !computespecprice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != computespecprice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cspuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cspuo.mutation.FkComputeSpecID(); ok {
		_spec.SetField(computespecprice.FieldFkComputeSpecID, field.TypeInt32, value)
	}
	if value, ok := cspuo.mutation.AddedFkComputeSpecID(); ok {
		_spec.AddField(computespecprice.FieldFkComputeSpecID, field.TypeInt32, value)
	}
	if value, ok := cspuo.mutation.Day(); ok {
		_spec.SetField(computespecprice.FieldDay, field.TypeInt32, value)
	}
	if value, ok := cspuo.mutation.AddedDay(); ok {
		_spec.AddField(computespecprice.FieldDay, field.TypeInt32, value)
	}
	if value, ok := cspuo.mutation.Price(); ok {
		_spec.SetField(computespecprice.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := cspuo.mutation.AddedPrice(); ok {
		_spec.AddField(computespecprice.FieldPrice, field.TypeFloat32, value)
	}
	_node = &ComputeSpecPrice{config: cspuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cspuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{computespecprice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cspuo.mutation.done = true
	return _node, nil
}
