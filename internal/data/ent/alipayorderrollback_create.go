// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/alipayorderrollback"
)

// AlipayOrderRollbackCreate is the builder for creating a AlipayOrderRollback entity.
type AlipayOrderRollbackCreate struct {
	config
	mutation *AlipayOrderRollbackMutation
	hooks    []Hook
}

// SetNotifyID sets the "notify_id" field.
func (aorc *AlipayOrderRollbackCreate) SetNotifyID(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetNotifyID(s)
	return aorc
}

// SetNotifyType sets the "notify_type" field.
func (aorc *AlipayOrderRollbackCreate) SetNotifyType(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetNotifyType(s)
	return aorc
}

// SetNotifyTime sets the "notify_time" field.
func (aorc *AlipayOrderRollbackCreate) SetNotifyTime(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetNotifyTime(s)
	return aorc
}

// SetCharset sets the "charset" field.
func (aorc *AlipayOrderRollbackCreate) SetCharset(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetCharset(s)
	return aorc
}

// SetVersion sets the "version" field.
func (aorc *AlipayOrderRollbackCreate) SetVersion(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetVersion(s)
	return aorc
}

// SetSignType sets the "sign_type" field.
func (aorc *AlipayOrderRollbackCreate) SetSignType(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetSignType(s)
	return aorc
}

// SetSign sets the "sign" field.
func (aorc *AlipayOrderRollbackCreate) SetSign(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetSign(s)
	return aorc
}

// SetFundBillList sets the "fund_bill_list" field.
func (aorc *AlipayOrderRollbackCreate) SetFundBillList(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetFundBillList(s)
	return aorc
}

// SetReceiptAmount sets the "receipt_amount" field.
func (aorc *AlipayOrderRollbackCreate) SetReceiptAmount(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetReceiptAmount(s)
	return aorc
}

// SetInvoiceAmount sets the "invoice_amount" field.
func (aorc *AlipayOrderRollbackCreate) SetInvoiceAmount(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetInvoiceAmount(s)
	return aorc
}

// SetBuyerPayAmount sets the "buyer_pay_amount" field.
func (aorc *AlipayOrderRollbackCreate) SetBuyerPayAmount(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetBuyerPayAmount(s)
	return aorc
}

// SetPointAmount sets the "point_amount" field.
func (aorc *AlipayOrderRollbackCreate) SetPointAmount(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetPointAmount(s)
	return aorc
}

// SetVoucherDetailList sets the "voucher_detail_list" field.
func (aorc *AlipayOrderRollbackCreate) SetVoucherDetailList(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetVoucherDetailList(s)
	return aorc
}

// SetPassbackParams sets the "passback_params" field.
func (aorc *AlipayOrderRollbackCreate) SetPassbackParams(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetPassbackParams(s)
	return aorc
}

// SetTradeNo sets the "trade_no" field.
func (aorc *AlipayOrderRollbackCreate) SetTradeNo(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetTradeNo(s)
	return aorc
}

// SetAppID sets the "app_id" field.
func (aorc *AlipayOrderRollbackCreate) SetAppID(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetAppID(s)
	return aorc
}

// SetOutTradeNo sets the "out_trade_no" field.
func (aorc *AlipayOrderRollbackCreate) SetOutTradeNo(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetOutTradeNo(s)
	return aorc
}

// SetOutBizNo sets the "out_biz_no" field.
func (aorc *AlipayOrderRollbackCreate) SetOutBizNo(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetOutBizNo(s)
	return aorc
}

// SetBuyerID sets the "buyer_id" field.
func (aorc *AlipayOrderRollbackCreate) SetBuyerID(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetBuyerID(s)
	return aorc
}

// SetSellerID sets the "seller_id" field.
func (aorc *AlipayOrderRollbackCreate) SetSellerID(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetSellerID(s)
	return aorc
}

// SetTradeStatus sets the "trade_status" field.
func (aorc *AlipayOrderRollbackCreate) SetTradeStatus(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetTradeStatus(s)
	return aorc
}

// SetTotalAmount sets the "total_amount" field.
func (aorc *AlipayOrderRollbackCreate) SetTotalAmount(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetTotalAmount(s)
	return aorc
}

// SetRefundFee sets the "refund_fee" field.
func (aorc *AlipayOrderRollbackCreate) SetRefundFee(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetRefundFee(s)
	return aorc
}

// SetSubject sets the "subject" field.
func (aorc *AlipayOrderRollbackCreate) SetSubject(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetSubject(s)
	return aorc
}

// SetBody sets the "body" field.
func (aorc *AlipayOrderRollbackCreate) SetBody(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetBody(s)
	return aorc
}

// SetGmtCreate sets the "gmt_create" field.
func (aorc *AlipayOrderRollbackCreate) SetGmtCreate(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetGmtCreate(s)
	return aorc
}

// SetGmtPayment sets the "gmt_payment" field.
func (aorc *AlipayOrderRollbackCreate) SetGmtPayment(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetGmtPayment(s)
	return aorc
}

// SetGmtClose sets the "gmt_close" field.
func (aorc *AlipayOrderRollbackCreate) SetGmtClose(s string) *AlipayOrderRollbackCreate {
	aorc.mutation.SetGmtClose(s)
	return aorc
}

// SetCreateTime sets the "create_time" field.
func (aorc *AlipayOrderRollbackCreate) SetCreateTime(t time.Time) *AlipayOrderRollbackCreate {
	aorc.mutation.SetCreateTime(t)
	return aorc
}

// SetUpdateTime sets the "update_time" field.
func (aorc *AlipayOrderRollbackCreate) SetUpdateTime(t time.Time) *AlipayOrderRollbackCreate {
	aorc.mutation.SetUpdateTime(t)
	return aorc
}

// Mutation returns the AlipayOrderRollbackMutation object of the builder.
func (aorc *AlipayOrderRollbackCreate) Mutation() *AlipayOrderRollbackMutation {
	return aorc.mutation
}

// Save creates the AlipayOrderRollback in the database.
func (aorc *AlipayOrderRollbackCreate) Save(ctx context.Context) (*AlipayOrderRollback, error) {
	return withHooks(ctx, aorc.sqlSave, aorc.mutation, aorc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aorc *AlipayOrderRollbackCreate) SaveX(ctx context.Context) *AlipayOrderRollback {
	v, err := aorc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aorc *AlipayOrderRollbackCreate) Exec(ctx context.Context) error {
	_, err := aorc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aorc *AlipayOrderRollbackCreate) ExecX(ctx context.Context) {
	if err := aorc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aorc *AlipayOrderRollbackCreate) check() error {
	if _, ok := aorc.mutation.NotifyID(); !ok {
		return &ValidationError{Name: "notify_id", err: errors.New(`ent: missing required field "AlipayOrderRollback.notify_id"`)}
	}
	if _, ok := aorc.mutation.NotifyType(); !ok {
		return &ValidationError{Name: "notify_type", err: errors.New(`ent: missing required field "AlipayOrderRollback.notify_type"`)}
	}
	if _, ok := aorc.mutation.NotifyTime(); !ok {
		return &ValidationError{Name: "notify_time", err: errors.New(`ent: missing required field "AlipayOrderRollback.notify_time"`)}
	}
	if _, ok := aorc.mutation.Charset(); !ok {
		return &ValidationError{Name: "charset", err: errors.New(`ent: missing required field "AlipayOrderRollback.charset"`)}
	}
	if _, ok := aorc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "AlipayOrderRollback.version"`)}
	}
	if _, ok := aorc.mutation.SignType(); !ok {
		return &ValidationError{Name: "sign_type", err: errors.New(`ent: missing required field "AlipayOrderRollback.sign_type"`)}
	}
	if _, ok := aorc.mutation.Sign(); !ok {
		return &ValidationError{Name: "sign", err: errors.New(`ent: missing required field "AlipayOrderRollback.sign"`)}
	}
	if _, ok := aorc.mutation.FundBillList(); !ok {
		return &ValidationError{Name: "fund_bill_list", err: errors.New(`ent: missing required field "AlipayOrderRollback.fund_bill_list"`)}
	}
	if _, ok := aorc.mutation.ReceiptAmount(); !ok {
		return &ValidationError{Name: "receipt_amount", err: errors.New(`ent: missing required field "AlipayOrderRollback.receipt_amount"`)}
	}
	if _, ok := aorc.mutation.InvoiceAmount(); !ok {
		return &ValidationError{Name: "invoice_amount", err: errors.New(`ent: missing required field "AlipayOrderRollback.invoice_amount"`)}
	}
	if _, ok := aorc.mutation.BuyerPayAmount(); !ok {
		return &ValidationError{Name: "buyer_pay_amount", err: errors.New(`ent: missing required field "AlipayOrderRollback.buyer_pay_amount"`)}
	}
	if _, ok := aorc.mutation.PointAmount(); !ok {
		return &ValidationError{Name: "point_amount", err: errors.New(`ent: missing required field "AlipayOrderRollback.point_amount"`)}
	}
	if _, ok := aorc.mutation.VoucherDetailList(); !ok {
		return &ValidationError{Name: "voucher_detail_list", err: errors.New(`ent: missing required field "AlipayOrderRollback.voucher_detail_list"`)}
	}
	if _, ok := aorc.mutation.PassbackParams(); !ok {
		return &ValidationError{Name: "passback_params", err: errors.New(`ent: missing required field "AlipayOrderRollback.passback_params"`)}
	}
	if _, ok := aorc.mutation.TradeNo(); !ok {
		return &ValidationError{Name: "trade_no", err: errors.New(`ent: missing required field "AlipayOrderRollback.trade_no"`)}
	}
	if _, ok := aorc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AlipayOrderRollback.app_id"`)}
	}
	if _, ok := aorc.mutation.OutTradeNo(); !ok {
		return &ValidationError{Name: "out_trade_no", err: errors.New(`ent: missing required field "AlipayOrderRollback.out_trade_no"`)}
	}
	if _, ok := aorc.mutation.OutBizNo(); !ok {
		return &ValidationError{Name: "out_biz_no", err: errors.New(`ent: missing required field "AlipayOrderRollback.out_biz_no"`)}
	}
	if _, ok := aorc.mutation.BuyerID(); !ok {
		return &ValidationError{Name: "buyer_id", err: errors.New(`ent: missing required field "AlipayOrderRollback.buyer_id"`)}
	}
	if _, ok := aorc.mutation.SellerID(); !ok {
		return &ValidationError{Name: "seller_id", err: errors.New(`ent: missing required field "AlipayOrderRollback.seller_id"`)}
	}
	if _, ok := aorc.mutation.TradeStatus(); !ok {
		return &ValidationError{Name: "trade_status", err: errors.New(`ent: missing required field "AlipayOrderRollback.trade_status"`)}
	}
	if _, ok := aorc.mutation.TotalAmount(); !ok {
		return &ValidationError{Name: "total_amount", err: errors.New(`ent: missing required field "AlipayOrderRollback.total_amount"`)}
	}
	if _, ok := aorc.mutation.RefundFee(); !ok {
		return &ValidationError{Name: "refund_fee", err: errors.New(`ent: missing required field "AlipayOrderRollback.refund_fee"`)}
	}
	if _, ok := aorc.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required field "AlipayOrderRollback.subject"`)}
	}
	if _, ok := aorc.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "AlipayOrderRollback.body"`)}
	}
	if _, ok := aorc.mutation.GmtCreate(); !ok {
		return &ValidationError{Name: "gmt_create", err: errors.New(`ent: missing required field "AlipayOrderRollback.gmt_create"`)}
	}
	if _, ok := aorc.mutation.GmtPayment(); !ok {
		return &ValidationError{Name: "gmt_payment", err: errors.New(`ent: missing required field "AlipayOrderRollback.gmt_payment"`)}
	}
	if _, ok := aorc.mutation.GmtClose(); !ok {
		return &ValidationError{Name: "gmt_close", err: errors.New(`ent: missing required field "AlipayOrderRollback.gmt_close"`)}
	}
	if _, ok := aorc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "AlipayOrderRollback.create_time"`)}
	}
	if _, ok := aorc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "AlipayOrderRollback.update_time"`)}
	}
	return nil
}

func (aorc *AlipayOrderRollbackCreate) sqlSave(ctx context.Context) (*AlipayOrderRollback, error) {
	if err := aorc.check(); err != nil {
		return nil, err
	}
	_node, _spec := aorc.createSpec()
	if err := sqlgraph.CreateNode(ctx, aorc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	aorc.mutation.id = &_node.ID
	aorc.mutation.done = true
	return _node, nil
}

func (aorc *AlipayOrderRollbackCreate) createSpec() (*AlipayOrderRollback, *sqlgraph.CreateSpec) {
	var (
		_node = &AlipayOrderRollback{config: aorc.config}
		_spec = sqlgraph.NewCreateSpec(alipayorderrollback.Table, sqlgraph.NewFieldSpec(alipayorderrollback.FieldID, field.TypeInt))
	)
	if value, ok := aorc.mutation.NotifyID(); ok {
		_spec.SetField(alipayorderrollback.FieldNotifyID, field.TypeString, value)
		_node.NotifyID = value
	}
	if value, ok := aorc.mutation.NotifyType(); ok {
		_spec.SetField(alipayorderrollback.FieldNotifyType, field.TypeString, value)
		_node.NotifyType = value
	}
	if value, ok := aorc.mutation.NotifyTime(); ok {
		_spec.SetField(alipayorderrollback.FieldNotifyTime, field.TypeString, value)
		_node.NotifyTime = value
	}
	if value, ok := aorc.mutation.Charset(); ok {
		_spec.SetField(alipayorderrollback.FieldCharset, field.TypeString, value)
		_node.Charset = value
	}
	if value, ok := aorc.mutation.Version(); ok {
		_spec.SetField(alipayorderrollback.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := aorc.mutation.SignType(); ok {
		_spec.SetField(alipayorderrollback.FieldSignType, field.TypeString, value)
		_node.SignType = value
	}
	if value, ok := aorc.mutation.Sign(); ok {
		_spec.SetField(alipayorderrollback.FieldSign, field.TypeString, value)
		_node.Sign = value
	}
	if value, ok := aorc.mutation.FundBillList(); ok {
		_spec.SetField(alipayorderrollback.FieldFundBillList, field.TypeString, value)
		_node.FundBillList = value
	}
	if value, ok := aorc.mutation.ReceiptAmount(); ok {
		_spec.SetField(alipayorderrollback.FieldReceiptAmount, field.TypeString, value)
		_node.ReceiptAmount = value
	}
	if value, ok := aorc.mutation.InvoiceAmount(); ok {
		_spec.SetField(alipayorderrollback.FieldInvoiceAmount, field.TypeString, value)
		_node.InvoiceAmount = value
	}
	if value, ok := aorc.mutation.BuyerPayAmount(); ok {
		_spec.SetField(alipayorderrollback.FieldBuyerPayAmount, field.TypeString, value)
		_node.BuyerPayAmount = value
	}
	if value, ok := aorc.mutation.PointAmount(); ok {
		_spec.SetField(alipayorderrollback.FieldPointAmount, field.TypeString, value)
		_node.PointAmount = value
	}
	if value, ok := aorc.mutation.VoucherDetailList(); ok {
		_spec.SetField(alipayorderrollback.FieldVoucherDetailList, field.TypeString, value)
		_node.VoucherDetailList = value
	}
	if value, ok := aorc.mutation.PassbackParams(); ok {
		_spec.SetField(alipayorderrollback.FieldPassbackParams, field.TypeString, value)
		_node.PassbackParams = value
	}
	if value, ok := aorc.mutation.TradeNo(); ok {
		_spec.SetField(alipayorderrollback.FieldTradeNo, field.TypeString, value)
		_node.TradeNo = value
	}
	if value, ok := aorc.mutation.AppID(); ok {
		_spec.SetField(alipayorderrollback.FieldAppID, field.TypeString, value)
		_node.AppID = value
	}
	if value, ok := aorc.mutation.OutTradeNo(); ok {
		_spec.SetField(alipayorderrollback.FieldOutTradeNo, field.TypeString, value)
		_node.OutTradeNo = value
	}
	if value, ok := aorc.mutation.OutBizNo(); ok {
		_spec.SetField(alipayorderrollback.FieldOutBizNo, field.TypeString, value)
		_node.OutBizNo = value
	}
	if value, ok := aorc.mutation.BuyerID(); ok {
		_spec.SetField(alipayorderrollback.FieldBuyerID, field.TypeString, value)
		_node.BuyerID = value
	}
	if value, ok := aorc.mutation.SellerID(); ok {
		_spec.SetField(alipayorderrollback.FieldSellerID, field.TypeString, value)
		_node.SellerID = value
	}
	if value, ok := aorc.mutation.TradeStatus(); ok {
		_spec.SetField(alipayorderrollback.FieldTradeStatus, field.TypeString, value)
		_node.TradeStatus = value
	}
	if value, ok := aorc.mutation.TotalAmount(); ok {
		_spec.SetField(alipayorderrollback.FieldTotalAmount, field.TypeString, value)
		_node.TotalAmount = value
	}
	if value, ok := aorc.mutation.RefundFee(); ok {
		_spec.SetField(alipayorderrollback.FieldRefundFee, field.TypeString, value)
		_node.RefundFee = value
	}
	if value, ok := aorc.mutation.Subject(); ok {
		_spec.SetField(alipayorderrollback.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := aorc.mutation.Body(); ok {
		_spec.SetField(alipayorderrollback.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	if value, ok := aorc.mutation.GmtCreate(); ok {
		_spec.SetField(alipayorderrollback.FieldGmtCreate, field.TypeString, value)
		_node.GmtCreate = value
	}
	if value, ok := aorc.mutation.GmtPayment(); ok {
		_spec.SetField(alipayorderrollback.FieldGmtPayment, field.TypeString, value)
		_node.GmtPayment = value
	}
	if value, ok := aorc.mutation.GmtClose(); ok {
		_spec.SetField(alipayorderrollback.FieldGmtClose, field.TypeString, value)
		_node.GmtClose = value
	}
	if value, ok := aorc.mutation.CreateTime(); ok {
		_spec.SetField(alipayorderrollback.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := aorc.mutation.UpdateTime(); ok {
		_spec.SetField(alipayorderrollback.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// AlipayOrderRollbackCreateBulk is the builder for creating many AlipayOrderRollback entities in bulk.
type AlipayOrderRollbackCreateBulk struct {
	config
	builders []*AlipayOrderRollbackCreate
}

// Save creates the AlipayOrderRollback entities in the database.
func (aorcb *AlipayOrderRollbackCreateBulk) Save(ctx context.Context) ([]*AlipayOrderRollback, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aorcb.builders))
	nodes := make([]*AlipayOrderRollback, len(aorcb.builders))
	mutators := make([]Mutator, len(aorcb.builders))
	for i := range aorcb.builders {
		func(i int, root context.Context) {
			builder := aorcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AlipayOrderRollbackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aorcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aorcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aorcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aorcb *AlipayOrderRollbackCreateBulk) SaveX(ctx context.Context) []*AlipayOrderRollback {
	v, err := aorcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aorcb *AlipayOrderRollbackCreateBulk) Exec(ctx context.Context) error {
	_, err := aorcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aorcb *AlipayOrderRollbackCreateBulk) ExecX(ctx context.Context) {
	if err := aorcb.Exec(ctx); err != nil {
		panic(err)
	}
}
