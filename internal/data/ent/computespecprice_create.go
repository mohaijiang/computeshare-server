// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computespecprice"
)

// ComputeSpecPriceCreate is the builder for creating a ComputeSpecPrice entity.
type ComputeSpecPriceCreate struct {
	config
	mutation *ComputeSpecPriceMutation
	hooks    []Hook
}

// SetFkComputeSpecID sets the "fk_compute_spec_id" field.
func (cspc *ComputeSpecPriceCreate) SetFkComputeSpecID(i int32) *ComputeSpecPriceCreate {
	cspc.mutation.SetFkComputeSpecID(i)
	return cspc
}

// SetDay sets the "day" field.
func (cspc *ComputeSpecPriceCreate) SetDay(i int32) *ComputeSpecPriceCreate {
	cspc.mutation.SetDay(i)
	return cspc
}

// SetNillableDay sets the "day" field if the given value is not nil.
func (cspc *ComputeSpecPriceCreate) SetNillableDay(i *int32) *ComputeSpecPriceCreate {
	if i != nil {
		cspc.SetDay(*i)
	}
	return cspc
}

// SetPrice sets the "price" field.
func (cspc *ComputeSpecPriceCreate) SetPrice(f float32) *ComputeSpecPriceCreate {
	cspc.mutation.SetPrice(f)
	return cspc
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (cspc *ComputeSpecPriceCreate) SetNillablePrice(f *float32) *ComputeSpecPriceCreate {
	if f != nil {
		cspc.SetPrice(*f)
	}
	return cspc
}

// SetID sets the "id" field.
func (cspc *ComputeSpecPriceCreate) SetID(i int32) *ComputeSpecPriceCreate {
	cspc.mutation.SetID(i)
	return cspc
}

// Mutation returns the ComputeSpecPriceMutation object of the builder.
func (cspc *ComputeSpecPriceCreate) Mutation() *ComputeSpecPriceMutation {
	return cspc.mutation
}

// Save creates the ComputeSpecPrice in the database.
func (cspc *ComputeSpecPriceCreate) Save(ctx context.Context) (*ComputeSpecPrice, error) {
	cspc.defaults()
	return withHooks(ctx, cspc.sqlSave, cspc.mutation, cspc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cspc *ComputeSpecPriceCreate) SaveX(ctx context.Context) *ComputeSpecPrice {
	v, err := cspc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cspc *ComputeSpecPriceCreate) Exec(ctx context.Context) error {
	_, err := cspc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cspc *ComputeSpecPriceCreate) ExecX(ctx context.Context) {
	if err := cspc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cspc *ComputeSpecPriceCreate) defaults() {
	if _, ok := cspc.mutation.Day(); !ok {
		v := computespecprice.DefaultDay
		cspc.mutation.SetDay(v)
	}
	if _, ok := cspc.mutation.Price(); !ok {
		v := computespecprice.DefaultPrice
		cspc.mutation.SetPrice(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cspc *ComputeSpecPriceCreate) check() error {
	if _, ok := cspc.mutation.FkComputeSpecID(); !ok {
		return &ValidationError{Name: "fk_compute_spec_id", err: errors.New(`ent: missing required field "ComputeSpecPrice.fk_compute_spec_id"`)}
	}
	if _, ok := cspc.mutation.Day(); !ok {
		return &ValidationError{Name: "day", err: errors.New(`ent: missing required field "ComputeSpecPrice.day"`)}
	}
	if _, ok := cspc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "ComputeSpecPrice.price"`)}
	}
	return nil
}

func (cspc *ComputeSpecPriceCreate) sqlSave(ctx context.Context) (*ComputeSpecPrice, error) {
	if err := cspc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cspc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cspc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	cspc.mutation.id = &_node.ID
	cspc.mutation.done = true
	return _node, nil
}

func (cspc *ComputeSpecPriceCreate) createSpec() (*ComputeSpecPrice, *sqlgraph.CreateSpec) {
	var (
		_node = &ComputeSpecPrice{config: cspc.config}
		_spec = sqlgraph.NewCreateSpec(computespecprice.Table, sqlgraph.NewFieldSpec(computespecprice.FieldID, field.TypeInt32))
	)
	if id, ok := cspc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cspc.mutation.FkComputeSpecID(); ok {
		_spec.SetField(computespecprice.FieldFkComputeSpecID, field.TypeInt32, value)
		_node.FkComputeSpecID = value
	}
	if value, ok := cspc.mutation.Day(); ok {
		_spec.SetField(computespecprice.FieldDay, field.TypeInt32, value)
		_node.Day = value
	}
	if value, ok := cspc.mutation.Price(); ok {
		_spec.SetField(computespecprice.FieldPrice, field.TypeFloat32, value)
		_node.Price = value
	}
	return _node, _spec
}

// ComputeSpecPriceCreateBulk is the builder for creating many ComputeSpecPrice entities in bulk.
type ComputeSpecPriceCreateBulk struct {
	config
	builders []*ComputeSpecPriceCreate
}

// Save creates the ComputeSpecPrice entities in the database.
func (cspcb *ComputeSpecPriceCreateBulk) Save(ctx context.Context) ([]*ComputeSpecPrice, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cspcb.builders))
	nodes := make([]*ComputeSpecPrice, len(cspcb.builders))
	mutators := make([]Mutator, len(cspcb.builders))
	for i := range cspcb.builders {
		func(i int, root context.Context) {
			builder := cspcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ComputeSpecPriceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cspcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cspcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cspcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cspcb *ComputeSpecPriceCreateBulk) SaveX(ctx context.Context) []*ComputeSpecPrice {
	v, err := cspcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cspcb *ComputeSpecPriceCreateBulk) Exec(ctx context.Context) error {
	_, err := cspcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cspcb *ComputeSpecPriceCreateBulk) ExecX(ctx context.Context) {
	if err := cspcb.Exec(ctx); err != nil {
		panic(err)
	}
}
