// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cycletransaction"
)

// CycleTransactionCreate is the builder for creating a CycleTransaction entity.
type CycleTransactionCreate struct {
	config
	mutation *CycleTransactionMutation
	hooks    []Hook
}

// SetFkCycleID sets the "fk_cycle_id" field.
func (ctc *CycleTransactionCreate) SetFkCycleID(u uuid.UUID) *CycleTransactionCreate {
	ctc.mutation.SetFkCycleID(u)
	return ctc
}

// SetFkUserID sets the "fk_user_id" field.
func (ctc *CycleTransactionCreate) SetFkUserID(u uuid.UUID) *CycleTransactionCreate {
	ctc.mutation.SetFkUserID(u)
	return ctc
}

// SetFkCycleOrderID sets the "fk_cycle_order_id" field.
func (ctc *CycleTransactionCreate) SetFkCycleOrderID(u uuid.UUID) *CycleTransactionCreate {
	ctc.mutation.SetFkCycleOrderID(u)
	return ctc
}

// SetFkCycleRechargeID sets the "fk_cycle_recharge_id" field.
func (ctc *CycleTransactionCreate) SetFkCycleRechargeID(u uuid.UUID) *CycleTransactionCreate {
	ctc.mutation.SetFkCycleRechargeID(u)
	return ctc
}

// SetOperation sets the "operation" field.
func (ctc *CycleTransactionCreate) SetOperation(s string) *CycleTransactionCreate {
	ctc.mutation.SetOperation(s)
	return ctc
}

// SetSymbol sets the "symbol" field.
func (ctc *CycleTransactionCreate) SetSymbol(s string) *CycleTransactionCreate {
	ctc.mutation.SetSymbol(s)
	return ctc
}

// SetCycle sets the "cycle" field.
func (ctc *CycleTransactionCreate) SetCycle(f float64) *CycleTransactionCreate {
	ctc.mutation.SetCycle(f)
	return ctc
}

// SetBalance sets the "balance" field.
func (ctc *CycleTransactionCreate) SetBalance(f float64) *CycleTransactionCreate {
	ctc.mutation.SetBalance(f)
	return ctc
}

// SetOperationTime sets the "operation_time" field.
func (ctc *CycleTransactionCreate) SetOperationTime(t time.Time) *CycleTransactionCreate {
	ctc.mutation.SetOperationTime(t)
	return ctc
}

// SetID sets the "id" field.
func (ctc *CycleTransactionCreate) SetID(u uuid.UUID) *CycleTransactionCreate {
	ctc.mutation.SetID(u)
	return ctc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ctc *CycleTransactionCreate) SetNillableID(u *uuid.UUID) *CycleTransactionCreate {
	if u != nil {
		ctc.SetID(*u)
	}
	return ctc
}

// Mutation returns the CycleTransactionMutation object of the builder.
func (ctc *CycleTransactionCreate) Mutation() *CycleTransactionMutation {
	return ctc.mutation
}

// Save creates the CycleTransaction in the database.
func (ctc *CycleTransactionCreate) Save(ctx context.Context) (*CycleTransaction, error) {
	ctc.defaults()
	return withHooks(ctx, ctc.sqlSave, ctc.mutation, ctc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ctc *CycleTransactionCreate) SaveX(ctx context.Context) *CycleTransaction {
	v, err := ctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctc *CycleTransactionCreate) Exec(ctx context.Context) error {
	_, err := ctc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctc *CycleTransactionCreate) ExecX(ctx context.Context) {
	if err := ctc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctc *CycleTransactionCreate) defaults() {
	if _, ok := ctc.mutation.ID(); !ok {
		v := cycletransaction.DefaultID()
		ctc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctc *CycleTransactionCreate) check() error {
	if _, ok := ctc.mutation.FkCycleID(); !ok {
		return &ValidationError{Name: "fk_cycle_id", err: errors.New(`ent: missing required field "CycleTransaction.fk_cycle_id"`)}
	}
	if _, ok := ctc.mutation.FkUserID(); !ok {
		return &ValidationError{Name: "fk_user_id", err: errors.New(`ent: missing required field "CycleTransaction.fk_user_id"`)}
	}
	if _, ok := ctc.mutation.FkCycleOrderID(); !ok {
		return &ValidationError{Name: "fk_cycle_order_id", err: errors.New(`ent: missing required field "CycleTransaction.fk_cycle_order_id"`)}
	}
	if _, ok := ctc.mutation.FkCycleRechargeID(); !ok {
		return &ValidationError{Name: "fk_cycle_recharge_id", err: errors.New(`ent: missing required field "CycleTransaction.fk_cycle_recharge_id"`)}
	}
	if _, ok := ctc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`ent: missing required field "CycleTransaction.operation"`)}
	}
	if v, ok := ctc.mutation.Operation(); ok {
		if err := cycletransaction.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`ent: validator failed for field "CycleTransaction.operation": %w`, err)}
		}
	}
	if _, ok := ctc.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "CycleTransaction.symbol"`)}
	}
	if v, ok := ctc.mutation.Symbol(); ok {
		if err := cycletransaction.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "CycleTransaction.symbol": %w`, err)}
		}
	}
	if _, ok := ctc.mutation.Cycle(); !ok {
		return &ValidationError{Name: "cycle", err: errors.New(`ent: missing required field "CycleTransaction.cycle"`)}
	}
	if _, ok := ctc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "CycleTransaction.balance"`)}
	}
	if _, ok := ctc.mutation.OperationTime(); !ok {
		return &ValidationError{Name: "operation_time", err: errors.New(`ent: missing required field "CycleTransaction.operation_time"`)}
	}
	return nil
}

func (ctc *CycleTransactionCreate) sqlSave(ctx context.Context) (*CycleTransaction, error) {
	if err := ctc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ctc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ctc.mutation.id = &_node.ID
	ctc.mutation.done = true
	return _node, nil
}

func (ctc *CycleTransactionCreate) createSpec() (*CycleTransaction, *sqlgraph.CreateSpec) {
	var (
		_node = &CycleTransaction{config: ctc.config}
		_spec = sqlgraph.NewCreateSpec(cycletransaction.Table, sqlgraph.NewFieldSpec(cycletransaction.FieldID, field.TypeUUID))
	)
	if id, ok := ctc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ctc.mutation.FkCycleID(); ok {
		_spec.SetField(cycletransaction.FieldFkCycleID, field.TypeUUID, value)
		_node.FkCycleID = value
	}
	if value, ok := ctc.mutation.FkUserID(); ok {
		_spec.SetField(cycletransaction.FieldFkUserID, field.TypeUUID, value)
		_node.FkUserID = value
	}
	if value, ok := ctc.mutation.FkCycleOrderID(); ok {
		_spec.SetField(cycletransaction.FieldFkCycleOrderID, field.TypeUUID, value)
		_node.FkCycleOrderID = value
	}
	if value, ok := ctc.mutation.FkCycleRechargeID(); ok {
		_spec.SetField(cycletransaction.FieldFkCycleRechargeID, field.TypeUUID, value)
		_node.FkCycleRechargeID = value
	}
	if value, ok := ctc.mutation.Operation(); ok {
		_spec.SetField(cycletransaction.FieldOperation, field.TypeString, value)
		_node.Operation = value
	}
	if value, ok := ctc.mutation.Symbol(); ok {
		_spec.SetField(cycletransaction.FieldSymbol, field.TypeString, value)
		_node.Symbol = value
	}
	if value, ok := ctc.mutation.Cycle(); ok {
		_spec.SetField(cycletransaction.FieldCycle, field.TypeFloat64, value)
		_node.Cycle = value
	}
	if value, ok := ctc.mutation.Balance(); ok {
		_spec.SetField(cycletransaction.FieldBalance, field.TypeFloat64, value)
		_node.Balance = value
	}
	if value, ok := ctc.mutation.OperationTime(); ok {
		_spec.SetField(cycletransaction.FieldOperationTime, field.TypeTime, value)
		_node.OperationTime = value
	}
	return _node, _spec
}

// CycleTransactionCreateBulk is the builder for creating many CycleTransaction entities in bulk.
type CycleTransactionCreateBulk struct {
	config
	builders []*CycleTransactionCreate
}

// Save creates the CycleTransaction entities in the database.
func (ctcb *CycleTransactionCreateBulk) Save(ctx context.Context) ([]*CycleTransaction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ctcb.builders))
	nodes := make([]*CycleTransaction, len(ctcb.builders))
	mutators := make([]Mutator, len(ctcb.builders))
	for i := range ctcb.builders {
		func(i int, root context.Context) {
			builder := ctcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CycleTransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ctcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ctcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ctcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ctcb *CycleTransactionCreateBulk) SaveX(ctx context.Context) []*CycleTransaction {
	v, err := ctcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctcb *CycleTransactionCreateBulk) Exec(ctx context.Context) error {
	_, err := ctcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctcb *CycleTransactionCreateBulk) ExecX(ctx context.Context) {
	if err := ctcb.Exec(ctx); err != nil {
		panic(err)
	}
}
