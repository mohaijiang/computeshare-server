// Code generated by ent, DO NOT EDIT.

package cycle

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Cycle {
	return predicate.Cycle(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Cycle {
	return predicate.Cycle(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Cycle {
	return predicate.Cycle(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Cycle {
	return predicate.Cycle(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Cycle {
	return predicate.Cycle(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Cycle {
	return predicate.Cycle(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Cycle {
	return predicate.Cycle(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Cycle {
	return predicate.Cycle(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Cycle {
	return predicate.Cycle(sql.FieldLTE(FieldID, id))
}

// FkUserID applies equality check predicate on the "fk_user_id" field. It's identical to FkUserIDEQ.
func FkUserID(v uuid.UUID) predicate.Cycle {
	return predicate.Cycle(sql.FieldEQ(FieldFkUserID, v))
}

// Cycle applies equality check predicate on the "cycle" field. It's identical to CycleEQ.
func Cycle(v float64) predicate.Cycle {
	return predicate.Cycle(sql.FieldEQ(FieldCycle, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Cycle {
	return predicate.Cycle(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Cycle {
	return predicate.Cycle(sql.FieldEQ(FieldUpdateTime, v))
}

// FkUserIDEQ applies the EQ predicate on the "fk_user_id" field.
func FkUserIDEQ(v uuid.UUID) predicate.Cycle {
	return predicate.Cycle(sql.FieldEQ(FieldFkUserID, v))
}

// FkUserIDNEQ applies the NEQ predicate on the "fk_user_id" field.
func FkUserIDNEQ(v uuid.UUID) predicate.Cycle {
	return predicate.Cycle(sql.FieldNEQ(FieldFkUserID, v))
}

// FkUserIDIn applies the In predicate on the "fk_user_id" field.
func FkUserIDIn(vs ...uuid.UUID) predicate.Cycle {
	return predicate.Cycle(sql.FieldIn(FieldFkUserID, vs...))
}

// FkUserIDNotIn applies the NotIn predicate on the "fk_user_id" field.
func FkUserIDNotIn(vs ...uuid.UUID) predicate.Cycle {
	return predicate.Cycle(sql.FieldNotIn(FieldFkUserID, vs...))
}

// FkUserIDGT applies the GT predicate on the "fk_user_id" field.
func FkUserIDGT(v uuid.UUID) predicate.Cycle {
	return predicate.Cycle(sql.FieldGT(FieldFkUserID, v))
}

// FkUserIDGTE applies the GTE predicate on the "fk_user_id" field.
func FkUserIDGTE(v uuid.UUID) predicate.Cycle {
	return predicate.Cycle(sql.FieldGTE(FieldFkUserID, v))
}

// FkUserIDLT applies the LT predicate on the "fk_user_id" field.
func FkUserIDLT(v uuid.UUID) predicate.Cycle {
	return predicate.Cycle(sql.FieldLT(FieldFkUserID, v))
}

// FkUserIDLTE applies the LTE predicate on the "fk_user_id" field.
func FkUserIDLTE(v uuid.UUID) predicate.Cycle {
	return predicate.Cycle(sql.FieldLTE(FieldFkUserID, v))
}

// CycleEQ applies the EQ predicate on the "cycle" field.
func CycleEQ(v float64) predicate.Cycle {
	return predicate.Cycle(sql.FieldEQ(FieldCycle, v))
}

// CycleNEQ applies the NEQ predicate on the "cycle" field.
func CycleNEQ(v float64) predicate.Cycle {
	return predicate.Cycle(sql.FieldNEQ(FieldCycle, v))
}

// CycleIn applies the In predicate on the "cycle" field.
func CycleIn(vs ...float64) predicate.Cycle {
	return predicate.Cycle(sql.FieldIn(FieldCycle, vs...))
}

// CycleNotIn applies the NotIn predicate on the "cycle" field.
func CycleNotIn(vs ...float64) predicate.Cycle {
	return predicate.Cycle(sql.FieldNotIn(FieldCycle, vs...))
}

// CycleGT applies the GT predicate on the "cycle" field.
func CycleGT(v float64) predicate.Cycle {
	return predicate.Cycle(sql.FieldGT(FieldCycle, v))
}

// CycleGTE applies the GTE predicate on the "cycle" field.
func CycleGTE(v float64) predicate.Cycle {
	return predicate.Cycle(sql.FieldGTE(FieldCycle, v))
}

// CycleLT applies the LT predicate on the "cycle" field.
func CycleLT(v float64) predicate.Cycle {
	return predicate.Cycle(sql.FieldLT(FieldCycle, v))
}

// CycleLTE applies the LTE predicate on the "cycle" field.
func CycleLTE(v float64) predicate.Cycle {
	return predicate.Cycle(sql.FieldLTE(FieldCycle, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Cycle {
	return predicate.Cycle(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Cycle {
	return predicate.Cycle(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Cycle {
	return predicate.Cycle(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Cycle {
	return predicate.Cycle(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Cycle {
	return predicate.Cycle(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Cycle {
	return predicate.Cycle(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Cycle {
	return predicate.Cycle(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Cycle {
	return predicate.Cycle(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Cycle {
	return predicate.Cycle(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Cycle {
	return predicate.Cycle(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Cycle {
	return predicate.Cycle(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Cycle {
	return predicate.Cycle(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Cycle {
	return predicate.Cycle(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Cycle {
	return predicate.Cycle(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Cycle {
	return predicate.Cycle(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Cycle {
	return predicate.Cycle(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Cycle) predicate.Cycle {
	return predicate.Cycle(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Cycle) predicate.Cycle {
	return predicate.Cycle(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Cycle) predicate.Cycle {
	return predicate.Cycle(func(s *sql.Selector) {
		p(s.Not())
	})
}
