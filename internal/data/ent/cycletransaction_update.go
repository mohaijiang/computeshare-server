// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cycletransaction"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// CycleTransactionUpdate is the builder for updating CycleTransaction entities.
type CycleTransactionUpdate struct {
	config
	hooks    []Hook
	mutation *CycleTransactionMutation
}

// Where appends a list predicates to the CycleTransactionUpdate builder.
func (ctu *CycleTransactionUpdate) Where(ps ...predicate.CycleTransaction) *CycleTransactionUpdate {
	ctu.mutation.Where(ps...)
	return ctu
}

// SetFkCycleID sets the "fk_cycle_id" field.
func (ctu *CycleTransactionUpdate) SetFkCycleID(u uuid.UUID) *CycleTransactionUpdate {
	ctu.mutation.SetFkCycleID(u)
	return ctu
}

// SetFkUserID sets the "fk_user_id" field.
func (ctu *CycleTransactionUpdate) SetFkUserID(u uuid.UUID) *CycleTransactionUpdate {
	ctu.mutation.SetFkUserID(u)
	return ctu
}

// SetFkCycleOrderID sets the "fk_cycle_order_id" field.
func (ctu *CycleTransactionUpdate) SetFkCycleOrderID(u uuid.UUID) *CycleTransactionUpdate {
	ctu.mutation.SetFkCycleOrderID(u)
	return ctu
}

// SetFkCycleRechargeID sets the "fk_cycle_recharge_id" field.
func (ctu *CycleTransactionUpdate) SetFkCycleRechargeID(u uuid.UUID) *CycleTransactionUpdate {
	ctu.mutation.SetFkCycleRechargeID(u)
	return ctu
}

// SetOperation sets the "operation" field.
func (ctu *CycleTransactionUpdate) SetOperation(s string) *CycleTransactionUpdate {
	ctu.mutation.SetOperation(s)
	return ctu
}

// SetSymbol sets the "symbol" field.
func (ctu *CycleTransactionUpdate) SetSymbol(s string) *CycleTransactionUpdate {
	ctu.mutation.SetSymbol(s)
	return ctu
}

// SetCycle sets the "cycle" field.
func (ctu *CycleTransactionUpdate) SetCycle(f float64) *CycleTransactionUpdate {
	ctu.mutation.ResetCycle()
	ctu.mutation.SetCycle(f)
	return ctu
}

// AddCycle adds f to the "cycle" field.
func (ctu *CycleTransactionUpdate) AddCycle(f float64) *CycleTransactionUpdate {
	ctu.mutation.AddCycle(f)
	return ctu
}

// SetBalance sets the "balance" field.
func (ctu *CycleTransactionUpdate) SetBalance(f float64) *CycleTransactionUpdate {
	ctu.mutation.ResetBalance()
	ctu.mutation.SetBalance(f)
	return ctu
}

// AddBalance adds f to the "balance" field.
func (ctu *CycleTransactionUpdate) AddBalance(f float64) *CycleTransactionUpdate {
	ctu.mutation.AddBalance(f)
	return ctu
}

// SetOperationTime sets the "operation_time" field.
func (ctu *CycleTransactionUpdate) SetOperationTime(t time.Time) *CycleTransactionUpdate {
	ctu.mutation.SetOperationTime(t)
	return ctu
}

// Mutation returns the CycleTransactionMutation object of the builder.
func (ctu *CycleTransactionUpdate) Mutation() *CycleTransactionMutation {
	return ctu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctu *CycleTransactionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ctu.sqlSave, ctu.mutation, ctu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctu *CycleTransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := ctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctu *CycleTransactionUpdate) Exec(ctx context.Context) error {
	_, err := ctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctu *CycleTransactionUpdate) ExecX(ctx context.Context) {
	if err := ctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctu *CycleTransactionUpdate) check() error {
	if v, ok := ctu.mutation.Operation(); ok {
		if err := cycletransaction.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`ent: validator failed for field "CycleTransaction.operation": %w`, err)}
		}
	}
	if v, ok := ctu.mutation.Symbol(); ok {
		if err := cycletransaction.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "CycleTransaction.symbol": %w`, err)}
		}
	}
	return nil
}

func (ctu *CycleTransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ctu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cycletransaction.Table, cycletransaction.Columns, sqlgraph.NewFieldSpec(cycletransaction.FieldID, field.TypeUUID))
	if ps := ctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctu.mutation.FkCycleID(); ok {
		_spec.SetField(cycletransaction.FieldFkCycleID, field.TypeUUID, value)
	}
	if value, ok := ctu.mutation.FkUserID(); ok {
		_spec.SetField(cycletransaction.FieldFkUserID, field.TypeUUID, value)
	}
	if value, ok := ctu.mutation.FkCycleOrderID(); ok {
		_spec.SetField(cycletransaction.FieldFkCycleOrderID, field.TypeUUID, value)
	}
	if value, ok := ctu.mutation.FkCycleRechargeID(); ok {
		_spec.SetField(cycletransaction.FieldFkCycleRechargeID, field.TypeUUID, value)
	}
	if value, ok := ctu.mutation.Operation(); ok {
		_spec.SetField(cycletransaction.FieldOperation, field.TypeString, value)
	}
	if value, ok := ctu.mutation.Symbol(); ok {
		_spec.SetField(cycletransaction.FieldSymbol, field.TypeString, value)
	}
	if value, ok := ctu.mutation.Cycle(); ok {
		_spec.SetField(cycletransaction.FieldCycle, field.TypeFloat64, value)
	}
	if value, ok := ctu.mutation.AddedCycle(); ok {
		_spec.AddField(cycletransaction.FieldCycle, field.TypeFloat64, value)
	}
	if value, ok := ctu.mutation.Balance(); ok {
		_spec.SetField(cycletransaction.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := ctu.mutation.AddedBalance(); ok {
		_spec.AddField(cycletransaction.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := ctu.mutation.OperationTime(); ok {
		_spec.SetField(cycletransaction.FieldOperationTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cycletransaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ctu.mutation.done = true
	return n, nil
}

// CycleTransactionUpdateOne is the builder for updating a single CycleTransaction entity.
type CycleTransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CycleTransactionMutation
}

// SetFkCycleID sets the "fk_cycle_id" field.
func (ctuo *CycleTransactionUpdateOne) SetFkCycleID(u uuid.UUID) *CycleTransactionUpdateOne {
	ctuo.mutation.SetFkCycleID(u)
	return ctuo
}

// SetFkUserID sets the "fk_user_id" field.
func (ctuo *CycleTransactionUpdateOne) SetFkUserID(u uuid.UUID) *CycleTransactionUpdateOne {
	ctuo.mutation.SetFkUserID(u)
	return ctuo
}

// SetFkCycleOrderID sets the "fk_cycle_order_id" field.
func (ctuo *CycleTransactionUpdateOne) SetFkCycleOrderID(u uuid.UUID) *CycleTransactionUpdateOne {
	ctuo.mutation.SetFkCycleOrderID(u)
	return ctuo
}

// SetFkCycleRechargeID sets the "fk_cycle_recharge_id" field.
func (ctuo *CycleTransactionUpdateOne) SetFkCycleRechargeID(u uuid.UUID) *CycleTransactionUpdateOne {
	ctuo.mutation.SetFkCycleRechargeID(u)
	return ctuo
}

// SetOperation sets the "operation" field.
func (ctuo *CycleTransactionUpdateOne) SetOperation(s string) *CycleTransactionUpdateOne {
	ctuo.mutation.SetOperation(s)
	return ctuo
}

// SetSymbol sets the "symbol" field.
func (ctuo *CycleTransactionUpdateOne) SetSymbol(s string) *CycleTransactionUpdateOne {
	ctuo.mutation.SetSymbol(s)
	return ctuo
}

// SetCycle sets the "cycle" field.
func (ctuo *CycleTransactionUpdateOne) SetCycle(f float64) *CycleTransactionUpdateOne {
	ctuo.mutation.ResetCycle()
	ctuo.mutation.SetCycle(f)
	return ctuo
}

// AddCycle adds f to the "cycle" field.
func (ctuo *CycleTransactionUpdateOne) AddCycle(f float64) *CycleTransactionUpdateOne {
	ctuo.mutation.AddCycle(f)
	return ctuo
}

// SetBalance sets the "balance" field.
func (ctuo *CycleTransactionUpdateOne) SetBalance(f float64) *CycleTransactionUpdateOne {
	ctuo.mutation.ResetBalance()
	ctuo.mutation.SetBalance(f)
	return ctuo
}

// AddBalance adds f to the "balance" field.
func (ctuo *CycleTransactionUpdateOne) AddBalance(f float64) *CycleTransactionUpdateOne {
	ctuo.mutation.AddBalance(f)
	return ctuo
}

// SetOperationTime sets the "operation_time" field.
func (ctuo *CycleTransactionUpdateOne) SetOperationTime(t time.Time) *CycleTransactionUpdateOne {
	ctuo.mutation.SetOperationTime(t)
	return ctuo
}

// Mutation returns the CycleTransactionMutation object of the builder.
func (ctuo *CycleTransactionUpdateOne) Mutation() *CycleTransactionMutation {
	return ctuo.mutation
}

// Where appends a list predicates to the CycleTransactionUpdate builder.
func (ctuo *CycleTransactionUpdateOne) Where(ps ...predicate.CycleTransaction) *CycleTransactionUpdateOne {
	ctuo.mutation.Where(ps...)
	return ctuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctuo *CycleTransactionUpdateOne) Select(field string, fields ...string) *CycleTransactionUpdateOne {
	ctuo.fields = append([]string{field}, fields...)
	return ctuo
}

// Save executes the query and returns the updated CycleTransaction entity.
func (ctuo *CycleTransactionUpdateOne) Save(ctx context.Context) (*CycleTransaction, error) {
	return withHooks(ctx, ctuo.sqlSave, ctuo.mutation, ctuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctuo *CycleTransactionUpdateOne) SaveX(ctx context.Context) *CycleTransaction {
	node, err := ctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctuo *CycleTransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := ctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctuo *CycleTransactionUpdateOne) ExecX(ctx context.Context) {
	if err := ctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctuo *CycleTransactionUpdateOne) check() error {
	if v, ok := ctuo.mutation.Operation(); ok {
		if err := cycletransaction.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`ent: validator failed for field "CycleTransaction.operation": %w`, err)}
		}
	}
	if v, ok := ctuo.mutation.Symbol(); ok {
		if err := cycletransaction.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "CycleTransaction.symbol": %w`, err)}
		}
	}
	return nil
}

func (ctuo *CycleTransactionUpdateOne) sqlSave(ctx context.Context) (_node *CycleTransaction, err error) {
	if err := ctuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cycletransaction.Table, cycletransaction.Columns, sqlgraph.NewFieldSpec(cycletransaction.FieldID, field.TypeUUID))
	id, ok := ctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CycleTransaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cycletransaction.FieldID)
		for _, f := range fields {
			if !cycletransaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cycletransaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctuo.mutation.FkCycleID(); ok {
		_spec.SetField(cycletransaction.FieldFkCycleID, field.TypeUUID, value)
	}
	if value, ok := ctuo.mutation.FkUserID(); ok {
		_spec.SetField(cycletransaction.FieldFkUserID, field.TypeUUID, value)
	}
	if value, ok := ctuo.mutation.FkCycleOrderID(); ok {
		_spec.SetField(cycletransaction.FieldFkCycleOrderID, field.TypeUUID, value)
	}
	if value, ok := ctuo.mutation.FkCycleRechargeID(); ok {
		_spec.SetField(cycletransaction.FieldFkCycleRechargeID, field.TypeUUID, value)
	}
	if value, ok := ctuo.mutation.Operation(); ok {
		_spec.SetField(cycletransaction.FieldOperation, field.TypeString, value)
	}
	if value, ok := ctuo.mutation.Symbol(); ok {
		_spec.SetField(cycletransaction.FieldSymbol, field.TypeString, value)
	}
	if value, ok := ctuo.mutation.Cycle(); ok {
		_spec.SetField(cycletransaction.FieldCycle, field.TypeFloat64, value)
	}
	if value, ok := ctuo.mutation.AddedCycle(); ok {
		_spec.AddField(cycletransaction.FieldCycle, field.TypeFloat64, value)
	}
	if value, ok := ctuo.mutation.Balance(); ok {
		_spec.SetField(cycletransaction.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := ctuo.mutation.AddedBalance(); ok {
		_spec.AddField(cycletransaction.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := ctuo.mutation.OperationTime(); ok {
		_spec.SetField(cycletransaction.FieldOperationTime, field.TypeTime, value)
	}
	_node = &CycleTransaction{config: ctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cycletransaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ctuo.mutation.done = true
	return _node, nil
}
