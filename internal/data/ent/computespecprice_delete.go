// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computespecprice"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// ComputeSpecPriceDelete is the builder for deleting a ComputeSpecPrice entity.
type ComputeSpecPriceDelete struct {
	config
	hooks    []Hook
	mutation *ComputeSpecPriceMutation
}

// Where appends a list predicates to the ComputeSpecPriceDelete builder.
func (cspd *ComputeSpecPriceDelete) Where(ps ...predicate.ComputeSpecPrice) *ComputeSpecPriceDelete {
	cspd.mutation.Where(ps...)
	return cspd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cspd *ComputeSpecPriceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cspd.sqlExec, cspd.mutation, cspd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cspd *ComputeSpecPriceDelete) ExecX(ctx context.Context) int {
	n, err := cspd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cspd *ComputeSpecPriceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(computespecprice.Table, sqlgraph.NewFieldSpec(computespecprice.FieldID, field.TypeInt32))
	if ps := cspd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cspd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cspd.mutation.done = true
	return affected, err
}

// ComputeSpecPriceDeleteOne is the builder for deleting a single ComputeSpecPrice entity.
type ComputeSpecPriceDeleteOne struct {
	cspd *ComputeSpecPriceDelete
}

// Where appends a list predicates to the ComputeSpecPriceDelete builder.
func (cspdo *ComputeSpecPriceDeleteOne) Where(ps ...predicate.ComputeSpecPrice) *ComputeSpecPriceDeleteOne {
	cspdo.cspd.mutation.Where(ps...)
	return cspdo
}

// Exec executes the deletion query.
func (cspdo *ComputeSpecPriceDeleteOne) Exec(ctx context.Context) error {
	n, err := cspdo.cspd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{computespecprice.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cspdo *ComputeSpecPriceDeleteOne) ExecX(ctx context.Context) {
	if err := cspdo.Exec(ctx); err != nil {
		panic(err)
	}
}
