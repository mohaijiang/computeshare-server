// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cyclerecharge"
)

// CycleRecharge is the model entity for the CycleRecharge schema.
type CycleRecharge struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// 用户id
	FkUserID uuid.UUID `json:"fk_user_id,omitempty"`
	// 商家订单号
	OutTradeNo string `json:"out_trade_no,omitempty"`
	// 支付宝订单号
	AlipayTradeNo string `json:"alipay_trade_no,omitempty"`
	// 充值渠道
	RechargeChannel int `json:"recharge_channel,omitempty"`
	// 兑换码
	RedeemCode string `json:"redeem_code,omitempty"`
	// 状态
	State string `json:"state,omitempty"`
	// 支付的钱
	PayAmount float64 `json:"pay_amount,omitempty"`
	// 收到的钱
	TotalAmount float64 `json:"total_amount,omitempty"`
	// 购买的周期
	BuyCycle float64 `json:"buy_cycle,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CycleRecharge) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cyclerecharge.FieldPayAmount, cyclerecharge.FieldTotalAmount, cyclerecharge.FieldBuyCycle:
			values[i] = new(sql.NullFloat64)
		case cyclerecharge.FieldRechargeChannel:
			values[i] = new(sql.NullInt64)
		case cyclerecharge.FieldOutTradeNo, cyclerecharge.FieldAlipayTradeNo, cyclerecharge.FieldRedeemCode, cyclerecharge.FieldState:
			values[i] = new(sql.NullString)
		case cyclerecharge.FieldCreateTime, cyclerecharge.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case cyclerecharge.FieldID, cyclerecharge.FieldFkUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CycleRecharge fields.
func (cr *CycleRecharge) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cyclerecharge.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cr.ID = *value
			}
		case cyclerecharge.FieldFkUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fk_user_id", values[i])
			} else if value != nil {
				cr.FkUserID = *value
			}
		case cyclerecharge.FieldOutTradeNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field out_trade_no", values[i])
			} else if value.Valid {
				cr.OutTradeNo = value.String
			}
		case cyclerecharge.FieldAlipayTradeNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alipay_trade_no", values[i])
			} else if value.Valid {
				cr.AlipayTradeNo = value.String
			}
		case cyclerecharge.FieldRechargeChannel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field recharge_channel", values[i])
			} else if value.Valid {
				cr.RechargeChannel = int(value.Int64)
			}
		case cyclerecharge.FieldRedeemCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redeem_code", values[i])
			} else if value.Valid {
				cr.RedeemCode = value.String
			}
		case cyclerecharge.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				cr.State = value.String
			}
		case cyclerecharge.FieldPayAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field pay_amount", values[i])
			} else if value.Valid {
				cr.PayAmount = value.Float64
			}
		case cyclerecharge.FieldTotalAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_amount", values[i])
			} else if value.Valid {
				cr.TotalAmount = value.Float64
			}
		case cyclerecharge.FieldBuyCycle:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field buy_cycle", values[i])
			} else if value.Valid {
				cr.BuyCycle = value.Float64
			}
		case cyclerecharge.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				cr.CreateTime = value.Time
			}
		case cyclerecharge.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				cr.UpdateTime = value.Time
			}
		default:
			cr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CycleRecharge.
// This includes values selected through modifiers, order, etc.
func (cr *CycleRecharge) Value(name string) (ent.Value, error) {
	return cr.selectValues.Get(name)
}

// Update returns a builder for updating this CycleRecharge.
// Note that you need to call CycleRecharge.Unwrap() before calling this method if this CycleRecharge
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *CycleRecharge) Update() *CycleRechargeUpdateOne {
	return NewCycleRechargeClient(cr.config).UpdateOne(cr)
}

// Unwrap unwraps the CycleRecharge entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *CycleRecharge) Unwrap() *CycleRecharge {
	_tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: CycleRecharge is not a transactional entity")
	}
	cr.config.driver = _tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *CycleRecharge) String() string {
	var builder strings.Builder
	builder.WriteString("CycleRecharge(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cr.ID))
	builder.WriteString("fk_user_id=")
	builder.WriteString(fmt.Sprintf("%v", cr.FkUserID))
	builder.WriteString(", ")
	builder.WriteString("out_trade_no=")
	builder.WriteString(cr.OutTradeNo)
	builder.WriteString(", ")
	builder.WriteString("alipay_trade_no=")
	builder.WriteString(cr.AlipayTradeNo)
	builder.WriteString(", ")
	builder.WriteString("recharge_channel=")
	builder.WriteString(fmt.Sprintf("%v", cr.RechargeChannel))
	builder.WriteString(", ")
	builder.WriteString("redeem_code=")
	builder.WriteString(cr.RedeemCode)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(cr.State)
	builder.WriteString(", ")
	builder.WriteString("pay_amount=")
	builder.WriteString(fmt.Sprintf("%v", cr.PayAmount))
	builder.WriteString(", ")
	builder.WriteString("total_amount=")
	builder.WriteString(fmt.Sprintf("%v", cr.TotalAmount))
	builder.WriteString(", ")
	builder.WriteString("buy_cycle=")
	builder.WriteString(fmt.Sprintf("%v", cr.BuyCycle))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(cr.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(cr.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CycleRecharges is a parsable slice of CycleRecharge.
type CycleRecharges []*CycleRecharge
