// Code generated by ent, DO NOT EDIT.

package cyclerecharge

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLTE(FieldID, id))
}

// FkUserID applies equality check predicate on the "fk_user_id" field. It's identical to FkUserIDEQ.
func FkUserID(v uuid.UUID) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldFkUserID, v))
}

// OutTradeNo applies equality check predicate on the "out_trade_no" field. It's identical to OutTradeNoEQ.
func OutTradeNo(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldOutTradeNo, v))
}

// AlipayTradeNo applies equality check predicate on the "alipay_trade_no" field. It's identical to AlipayTradeNoEQ.
func AlipayTradeNo(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldAlipayTradeNo, v))
}

// RechargeChannel applies equality check predicate on the "recharge_channel" field. It's identical to RechargeChannelEQ.
func RechargeChannel(v int) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldRechargeChannel, v))
}

// RedeemCode applies equality check predicate on the "redeem_code" field. It's identical to RedeemCodeEQ.
func RedeemCode(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldRedeemCode, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldState, v))
}

// PayAmount applies equality check predicate on the "pay_amount" field. It's identical to PayAmountEQ.
func PayAmount(v float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldPayAmount, v))
}

// TotalAmount applies equality check predicate on the "total_amount" field. It's identical to TotalAmountEQ.
func TotalAmount(v float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldTotalAmount, v))
}

// BuyCycle applies equality check predicate on the "buy_cycle" field. It's identical to BuyCycleEQ.
func BuyCycle(v float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldBuyCycle, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldUpdateTime, v))
}

// FkUserIDEQ applies the EQ predicate on the "fk_user_id" field.
func FkUserIDEQ(v uuid.UUID) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldFkUserID, v))
}

// FkUserIDNEQ applies the NEQ predicate on the "fk_user_id" field.
func FkUserIDNEQ(v uuid.UUID) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNEQ(FieldFkUserID, v))
}

// FkUserIDIn applies the In predicate on the "fk_user_id" field.
func FkUserIDIn(vs ...uuid.UUID) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldIn(FieldFkUserID, vs...))
}

// FkUserIDNotIn applies the NotIn predicate on the "fk_user_id" field.
func FkUserIDNotIn(vs ...uuid.UUID) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNotIn(FieldFkUserID, vs...))
}

// FkUserIDGT applies the GT predicate on the "fk_user_id" field.
func FkUserIDGT(v uuid.UUID) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGT(FieldFkUserID, v))
}

// FkUserIDGTE applies the GTE predicate on the "fk_user_id" field.
func FkUserIDGTE(v uuid.UUID) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGTE(FieldFkUserID, v))
}

// FkUserIDLT applies the LT predicate on the "fk_user_id" field.
func FkUserIDLT(v uuid.UUID) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLT(FieldFkUserID, v))
}

// FkUserIDLTE applies the LTE predicate on the "fk_user_id" field.
func FkUserIDLTE(v uuid.UUID) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLTE(FieldFkUserID, v))
}

// OutTradeNoEQ applies the EQ predicate on the "out_trade_no" field.
func OutTradeNoEQ(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldOutTradeNo, v))
}

// OutTradeNoNEQ applies the NEQ predicate on the "out_trade_no" field.
func OutTradeNoNEQ(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNEQ(FieldOutTradeNo, v))
}

// OutTradeNoIn applies the In predicate on the "out_trade_no" field.
func OutTradeNoIn(vs ...string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldIn(FieldOutTradeNo, vs...))
}

// OutTradeNoNotIn applies the NotIn predicate on the "out_trade_no" field.
func OutTradeNoNotIn(vs ...string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNotIn(FieldOutTradeNo, vs...))
}

// OutTradeNoGT applies the GT predicate on the "out_trade_no" field.
func OutTradeNoGT(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGT(FieldOutTradeNo, v))
}

// OutTradeNoGTE applies the GTE predicate on the "out_trade_no" field.
func OutTradeNoGTE(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGTE(FieldOutTradeNo, v))
}

// OutTradeNoLT applies the LT predicate on the "out_trade_no" field.
func OutTradeNoLT(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLT(FieldOutTradeNo, v))
}

// OutTradeNoLTE applies the LTE predicate on the "out_trade_no" field.
func OutTradeNoLTE(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLTE(FieldOutTradeNo, v))
}

// OutTradeNoContains applies the Contains predicate on the "out_trade_no" field.
func OutTradeNoContains(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldContains(FieldOutTradeNo, v))
}

// OutTradeNoHasPrefix applies the HasPrefix predicate on the "out_trade_no" field.
func OutTradeNoHasPrefix(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldHasPrefix(FieldOutTradeNo, v))
}

// OutTradeNoHasSuffix applies the HasSuffix predicate on the "out_trade_no" field.
func OutTradeNoHasSuffix(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldHasSuffix(FieldOutTradeNo, v))
}

// OutTradeNoEqualFold applies the EqualFold predicate on the "out_trade_no" field.
func OutTradeNoEqualFold(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEqualFold(FieldOutTradeNo, v))
}

// OutTradeNoContainsFold applies the ContainsFold predicate on the "out_trade_no" field.
func OutTradeNoContainsFold(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldContainsFold(FieldOutTradeNo, v))
}

// AlipayTradeNoEQ applies the EQ predicate on the "alipay_trade_no" field.
func AlipayTradeNoEQ(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldAlipayTradeNo, v))
}

// AlipayTradeNoNEQ applies the NEQ predicate on the "alipay_trade_no" field.
func AlipayTradeNoNEQ(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNEQ(FieldAlipayTradeNo, v))
}

// AlipayTradeNoIn applies the In predicate on the "alipay_trade_no" field.
func AlipayTradeNoIn(vs ...string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldIn(FieldAlipayTradeNo, vs...))
}

// AlipayTradeNoNotIn applies the NotIn predicate on the "alipay_trade_no" field.
func AlipayTradeNoNotIn(vs ...string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNotIn(FieldAlipayTradeNo, vs...))
}

// AlipayTradeNoGT applies the GT predicate on the "alipay_trade_no" field.
func AlipayTradeNoGT(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGT(FieldAlipayTradeNo, v))
}

// AlipayTradeNoGTE applies the GTE predicate on the "alipay_trade_no" field.
func AlipayTradeNoGTE(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGTE(FieldAlipayTradeNo, v))
}

// AlipayTradeNoLT applies the LT predicate on the "alipay_trade_no" field.
func AlipayTradeNoLT(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLT(FieldAlipayTradeNo, v))
}

// AlipayTradeNoLTE applies the LTE predicate on the "alipay_trade_no" field.
func AlipayTradeNoLTE(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLTE(FieldAlipayTradeNo, v))
}

// AlipayTradeNoContains applies the Contains predicate on the "alipay_trade_no" field.
func AlipayTradeNoContains(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldContains(FieldAlipayTradeNo, v))
}

// AlipayTradeNoHasPrefix applies the HasPrefix predicate on the "alipay_trade_no" field.
func AlipayTradeNoHasPrefix(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldHasPrefix(FieldAlipayTradeNo, v))
}

// AlipayTradeNoHasSuffix applies the HasSuffix predicate on the "alipay_trade_no" field.
func AlipayTradeNoHasSuffix(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldHasSuffix(FieldAlipayTradeNo, v))
}

// AlipayTradeNoEqualFold applies the EqualFold predicate on the "alipay_trade_no" field.
func AlipayTradeNoEqualFold(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEqualFold(FieldAlipayTradeNo, v))
}

// AlipayTradeNoContainsFold applies the ContainsFold predicate on the "alipay_trade_no" field.
func AlipayTradeNoContainsFold(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldContainsFold(FieldAlipayTradeNo, v))
}

// RechargeChannelEQ applies the EQ predicate on the "recharge_channel" field.
func RechargeChannelEQ(v int) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldRechargeChannel, v))
}

// RechargeChannelNEQ applies the NEQ predicate on the "recharge_channel" field.
func RechargeChannelNEQ(v int) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNEQ(FieldRechargeChannel, v))
}

// RechargeChannelIn applies the In predicate on the "recharge_channel" field.
func RechargeChannelIn(vs ...int) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldIn(FieldRechargeChannel, vs...))
}

// RechargeChannelNotIn applies the NotIn predicate on the "recharge_channel" field.
func RechargeChannelNotIn(vs ...int) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNotIn(FieldRechargeChannel, vs...))
}

// RechargeChannelGT applies the GT predicate on the "recharge_channel" field.
func RechargeChannelGT(v int) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGT(FieldRechargeChannel, v))
}

// RechargeChannelGTE applies the GTE predicate on the "recharge_channel" field.
func RechargeChannelGTE(v int) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGTE(FieldRechargeChannel, v))
}

// RechargeChannelLT applies the LT predicate on the "recharge_channel" field.
func RechargeChannelLT(v int) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLT(FieldRechargeChannel, v))
}

// RechargeChannelLTE applies the LTE predicate on the "recharge_channel" field.
func RechargeChannelLTE(v int) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLTE(FieldRechargeChannel, v))
}

// RedeemCodeEQ applies the EQ predicate on the "redeem_code" field.
func RedeemCodeEQ(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldRedeemCode, v))
}

// RedeemCodeNEQ applies the NEQ predicate on the "redeem_code" field.
func RedeemCodeNEQ(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNEQ(FieldRedeemCode, v))
}

// RedeemCodeIn applies the In predicate on the "redeem_code" field.
func RedeemCodeIn(vs ...string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldIn(FieldRedeemCode, vs...))
}

// RedeemCodeNotIn applies the NotIn predicate on the "redeem_code" field.
func RedeemCodeNotIn(vs ...string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNotIn(FieldRedeemCode, vs...))
}

// RedeemCodeGT applies the GT predicate on the "redeem_code" field.
func RedeemCodeGT(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGT(FieldRedeemCode, v))
}

// RedeemCodeGTE applies the GTE predicate on the "redeem_code" field.
func RedeemCodeGTE(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGTE(FieldRedeemCode, v))
}

// RedeemCodeLT applies the LT predicate on the "redeem_code" field.
func RedeemCodeLT(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLT(FieldRedeemCode, v))
}

// RedeemCodeLTE applies the LTE predicate on the "redeem_code" field.
func RedeemCodeLTE(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLTE(FieldRedeemCode, v))
}

// RedeemCodeContains applies the Contains predicate on the "redeem_code" field.
func RedeemCodeContains(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldContains(FieldRedeemCode, v))
}

// RedeemCodeHasPrefix applies the HasPrefix predicate on the "redeem_code" field.
func RedeemCodeHasPrefix(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldHasPrefix(FieldRedeemCode, v))
}

// RedeemCodeHasSuffix applies the HasSuffix predicate on the "redeem_code" field.
func RedeemCodeHasSuffix(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldHasSuffix(FieldRedeemCode, v))
}

// RedeemCodeEqualFold applies the EqualFold predicate on the "redeem_code" field.
func RedeemCodeEqualFold(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEqualFold(FieldRedeemCode, v))
}

// RedeemCodeContainsFold applies the ContainsFold predicate on the "redeem_code" field.
func RedeemCodeContainsFold(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldContainsFold(FieldRedeemCode, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldHasSuffix(FieldState, v))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldContainsFold(FieldState, v))
}

// PayAmountEQ applies the EQ predicate on the "pay_amount" field.
func PayAmountEQ(v float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldPayAmount, v))
}

// PayAmountNEQ applies the NEQ predicate on the "pay_amount" field.
func PayAmountNEQ(v float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNEQ(FieldPayAmount, v))
}

// PayAmountIn applies the In predicate on the "pay_amount" field.
func PayAmountIn(vs ...float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldIn(FieldPayAmount, vs...))
}

// PayAmountNotIn applies the NotIn predicate on the "pay_amount" field.
func PayAmountNotIn(vs ...float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNotIn(FieldPayAmount, vs...))
}

// PayAmountGT applies the GT predicate on the "pay_amount" field.
func PayAmountGT(v float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGT(FieldPayAmount, v))
}

// PayAmountGTE applies the GTE predicate on the "pay_amount" field.
func PayAmountGTE(v float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGTE(FieldPayAmount, v))
}

// PayAmountLT applies the LT predicate on the "pay_amount" field.
func PayAmountLT(v float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLT(FieldPayAmount, v))
}

// PayAmountLTE applies the LTE predicate on the "pay_amount" field.
func PayAmountLTE(v float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLTE(FieldPayAmount, v))
}

// TotalAmountEQ applies the EQ predicate on the "total_amount" field.
func TotalAmountEQ(v float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldTotalAmount, v))
}

// TotalAmountNEQ applies the NEQ predicate on the "total_amount" field.
func TotalAmountNEQ(v float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNEQ(FieldTotalAmount, v))
}

// TotalAmountIn applies the In predicate on the "total_amount" field.
func TotalAmountIn(vs ...float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldIn(FieldTotalAmount, vs...))
}

// TotalAmountNotIn applies the NotIn predicate on the "total_amount" field.
func TotalAmountNotIn(vs ...float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNotIn(FieldTotalAmount, vs...))
}

// TotalAmountGT applies the GT predicate on the "total_amount" field.
func TotalAmountGT(v float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGT(FieldTotalAmount, v))
}

// TotalAmountGTE applies the GTE predicate on the "total_amount" field.
func TotalAmountGTE(v float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGTE(FieldTotalAmount, v))
}

// TotalAmountLT applies the LT predicate on the "total_amount" field.
func TotalAmountLT(v float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLT(FieldTotalAmount, v))
}

// TotalAmountLTE applies the LTE predicate on the "total_amount" field.
func TotalAmountLTE(v float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLTE(FieldTotalAmount, v))
}

// BuyCycleEQ applies the EQ predicate on the "buy_cycle" field.
func BuyCycleEQ(v float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldBuyCycle, v))
}

// BuyCycleNEQ applies the NEQ predicate on the "buy_cycle" field.
func BuyCycleNEQ(v float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNEQ(FieldBuyCycle, v))
}

// BuyCycleIn applies the In predicate on the "buy_cycle" field.
func BuyCycleIn(vs ...float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldIn(FieldBuyCycle, vs...))
}

// BuyCycleNotIn applies the NotIn predicate on the "buy_cycle" field.
func BuyCycleNotIn(vs ...float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNotIn(FieldBuyCycle, vs...))
}

// BuyCycleGT applies the GT predicate on the "buy_cycle" field.
func BuyCycleGT(v float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGT(FieldBuyCycle, v))
}

// BuyCycleGTE applies the GTE predicate on the "buy_cycle" field.
func BuyCycleGTE(v float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGTE(FieldBuyCycle, v))
}

// BuyCycleLT applies the LT predicate on the "buy_cycle" field.
func BuyCycleLT(v float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLT(FieldBuyCycle, v))
}

// BuyCycleLTE applies the LTE predicate on the "buy_cycle" field.
func BuyCycleLTE(v float64) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLTE(FieldBuyCycle, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.CycleRecharge {
	return predicate.CycleRecharge(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CycleRecharge) predicate.CycleRecharge {
	return predicate.CycleRecharge(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CycleRecharge) predicate.CycleRecharge {
	return predicate.CycleRecharge(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CycleRecharge) predicate.CycleRecharge {
	return predicate.CycleRecharge(func(s *sql.Selector) {
		p(s.Not())
	})
}
