// Code generated by ent, DO NOT EDIT.

package cyclerenewal

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the cyclerenewal type in the database.
	Label = "cycle_renewal"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFkUserID holds the string denoting the fk_user_id field in the database.
	FieldFkUserID = "fk_user_id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldResourceType holds the string denoting the resource_type field in the database.
	FieldResourceType = "resource_type"
	// FieldProductName holds the string denoting the product_name field in the database.
	FieldProductName = "product_name"
	// FieldProductDesc holds the string denoting the product_desc field in the database.
	FieldProductDesc = "product_desc"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldExtendDay holds the string denoting the extend_day field in the database.
	FieldExtendDay = "extend_day"
	// FieldExtendPrice holds the string denoting the extend_price field in the database.
	FieldExtendPrice = "extend_price"
	// FieldDueTime holds the string denoting the due_time field in the database.
	FieldDueTime = "due_time"
	// FieldRenewalTime holds the string denoting the renewal_time field in the database.
	FieldRenewalTime = "renewal_time"
	// FieldAutoRenewal holds the string denoting the auto_renewal field in the database.
	FieldAutoRenewal = "auto_renewal"
	// Table holds the table name of the cyclerenewal in the database.
	Table = "cycle_renewals"
)

// Columns holds all SQL columns for cyclerenewal fields.
var Columns = []string{
	FieldID,
	FieldFkUserID,
	FieldResourceID,
	FieldResourceType,
	FieldProductName,
	FieldProductDesc,
	FieldState,
	FieldExtendDay,
	FieldExtendPrice,
	FieldDueTime,
	FieldRenewalTime,
	FieldAutoRenewal,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ResourceTypeValidator is a validator for the "resource_type" field. It is called by the builders before save.
	ResourceTypeValidator func(int) error
	// ProductNameValidator is a validator for the "product_name" field. It is called by the builders before save.
	ProductNameValidator func(string) error
	// ProductDescValidator is a validator for the "product_desc" field. It is called by the builders before save.
	ProductDescValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the CycleRenewal queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFkUserID orders the results by the fk_user_id field.
func ByFkUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFkUserID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByResourceType orders the results by the resource_type field.
func ByResourceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceType, opts...).ToFunc()
}

// ByProductName orders the results by the product_name field.
func ByProductName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductName, opts...).ToFunc()
}

// ByProductDesc orders the results by the product_desc field.
func ByProductDesc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductDesc, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByExtendDay orders the results by the extend_day field.
func ByExtendDay(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtendDay, opts...).ToFunc()
}

// ByExtendPrice orders the results by the extend_price field.
func ByExtendPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtendPrice, opts...).ToFunc()
}

// ByDueTime orders the results by the due_time field.
func ByDueTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDueTime, opts...).ToFunc()
}

// ByRenewalTime orders the results by the renewal_time field.
func ByRenewalTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRenewalTime, opts...).ToFunc()
}

// ByAutoRenewal orders the results by the auto_renewal field.
func ByAutoRenewal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAutoRenewal, opts...).ToFunc()
}
