// Code generated by ent, DO NOT EDIT.

package cycletransaction

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the cycletransaction type in the database.
	Label = "cycle_transaction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFkCycleID holds the string denoting the fk_cycle_id field in the database.
	FieldFkCycleID = "fk_cycle_id"
	// FieldFkUserID holds the string denoting the fk_user_id field in the database.
	FieldFkUserID = "fk_user_id"
	// FieldFkCycleOrderID holds the string denoting the fk_cycle_order_id field in the database.
	FieldFkCycleOrderID = "fk_cycle_order_id"
	// FieldFkCycleRechargeID holds the string denoting the fk_cycle_recharge_id field in the database.
	FieldFkCycleRechargeID = "fk_cycle_recharge_id"
	// FieldOperation holds the string denoting the operation field in the database.
	FieldOperation = "operation"
	// FieldSymbol holds the string denoting the symbol field in the database.
	FieldSymbol = "symbol"
	// FieldCycle holds the string denoting the cycle field in the database.
	FieldCycle = "cycle"
	// FieldBalance holds the string denoting the balance field in the database.
	FieldBalance = "balance"
	// FieldOperationTime holds the string denoting the operation_time field in the database.
	FieldOperationTime = "operation_time"
	// Table holds the table name of the cycletransaction in the database.
	Table = "cycle_transactions"
)

// Columns holds all SQL columns for cycletransaction fields.
var Columns = []string{
	FieldID,
	FieldFkCycleID,
	FieldFkUserID,
	FieldFkCycleOrderID,
	FieldFkCycleRechargeID,
	FieldOperation,
	FieldSymbol,
	FieldCycle,
	FieldBalance,
	FieldOperationTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// OperationValidator is a validator for the "operation" field. It is called by the builders before save.
	OperationValidator func(string) error
	// SymbolValidator is a validator for the "symbol" field. It is called by the builders before save.
	SymbolValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the CycleTransaction queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFkCycleID orders the results by the fk_cycle_id field.
func ByFkCycleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFkCycleID, opts...).ToFunc()
}

// ByFkUserID orders the results by the fk_user_id field.
func ByFkUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFkUserID, opts...).ToFunc()
}

// ByFkCycleOrderID orders the results by the fk_cycle_order_id field.
func ByFkCycleOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFkCycleOrderID, opts...).ToFunc()
}

// ByFkCycleRechargeID orders the results by the fk_cycle_recharge_id field.
func ByFkCycleRechargeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFkCycleRechargeID, opts...).ToFunc()
}

// ByOperation orders the results by the operation field.
func ByOperation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperation, opts...).ToFunc()
}

// BySymbol orders the results by the symbol field.
func BySymbol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSymbol, opts...).ToFunc()
}

// ByCycle orders the results by the cycle field.
func ByCycle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCycle, opts...).ToFunc()
}

// ByBalance orders the results by the balance field.
func ByBalance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBalance, opts...).ToFunc()
}

// ByOperationTime orders the results by the operation_time field.
func ByOperationTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperationTime, opts...).ToFunc()
}
