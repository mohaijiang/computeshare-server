// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cyclerenewal"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// CycleRenewalUpdate is the builder for updating CycleRenewal entities.
type CycleRenewalUpdate struct {
	config
	hooks    []Hook
	mutation *CycleRenewalMutation
}

// Where appends a list predicates to the CycleRenewalUpdate builder.
func (cru *CycleRenewalUpdate) Where(ps ...predicate.CycleRenewal) *CycleRenewalUpdate {
	cru.mutation.Where(ps...)
	return cru
}

// SetFkUserID sets the "fk_user_id" field.
func (cru *CycleRenewalUpdate) SetFkUserID(u uuid.UUID) *CycleRenewalUpdate {
	cru.mutation.SetFkUserID(u)
	return cru
}

// SetResourceID sets the "resource_id" field.
func (cru *CycleRenewalUpdate) SetResourceID(u uuid.UUID) *CycleRenewalUpdate {
	cru.mutation.SetResourceID(u)
	return cru
}

// SetResourceType sets the "resource_type" field.
func (cru *CycleRenewalUpdate) SetResourceType(i int) *CycleRenewalUpdate {
	cru.mutation.ResetResourceType()
	cru.mutation.SetResourceType(i)
	return cru
}

// AddResourceType adds i to the "resource_type" field.
func (cru *CycleRenewalUpdate) AddResourceType(i int) *CycleRenewalUpdate {
	cru.mutation.AddResourceType(i)
	return cru
}

// SetProductName sets the "product_name" field.
func (cru *CycleRenewalUpdate) SetProductName(s string) *CycleRenewalUpdate {
	cru.mutation.SetProductName(s)
	return cru
}

// SetProductDesc sets the "product_desc" field.
func (cru *CycleRenewalUpdate) SetProductDesc(s string) *CycleRenewalUpdate {
	cru.mutation.SetProductDesc(s)
	return cru
}

// SetState sets the "state" field.
func (cru *CycleRenewalUpdate) SetState(i int8) *CycleRenewalUpdate {
	cru.mutation.ResetState()
	cru.mutation.SetState(i)
	return cru
}

// AddState adds i to the "state" field.
func (cru *CycleRenewalUpdate) AddState(i int8) *CycleRenewalUpdate {
	cru.mutation.AddState(i)
	return cru
}

// SetExtendDay sets the "extend_day" field.
func (cru *CycleRenewalUpdate) SetExtendDay(i int8) *CycleRenewalUpdate {
	cru.mutation.ResetExtendDay()
	cru.mutation.SetExtendDay(i)
	return cru
}

// AddExtendDay adds i to the "extend_day" field.
func (cru *CycleRenewalUpdate) AddExtendDay(i int8) *CycleRenewalUpdate {
	cru.mutation.AddExtendDay(i)
	return cru
}

// SetExtendPrice sets the "extend_price" field.
func (cru *CycleRenewalUpdate) SetExtendPrice(f float64) *CycleRenewalUpdate {
	cru.mutation.ResetExtendPrice()
	cru.mutation.SetExtendPrice(f)
	return cru
}

// AddExtendPrice adds f to the "extend_price" field.
func (cru *CycleRenewalUpdate) AddExtendPrice(f float64) *CycleRenewalUpdate {
	cru.mutation.AddExtendPrice(f)
	return cru
}

// SetDueTime sets the "due_time" field.
func (cru *CycleRenewalUpdate) SetDueTime(t time.Time) *CycleRenewalUpdate {
	cru.mutation.SetDueTime(t)
	return cru
}

// SetNillableDueTime sets the "due_time" field if the given value is not nil.
func (cru *CycleRenewalUpdate) SetNillableDueTime(t *time.Time) *CycleRenewalUpdate {
	if t != nil {
		cru.SetDueTime(*t)
	}
	return cru
}

// ClearDueTime clears the value of the "due_time" field.
func (cru *CycleRenewalUpdate) ClearDueTime() *CycleRenewalUpdate {
	cru.mutation.ClearDueTime()
	return cru
}

// SetRenewalTime sets the "renewal_time" field.
func (cru *CycleRenewalUpdate) SetRenewalTime(t time.Time) *CycleRenewalUpdate {
	cru.mutation.SetRenewalTime(t)
	return cru
}

// SetNillableRenewalTime sets the "renewal_time" field if the given value is not nil.
func (cru *CycleRenewalUpdate) SetNillableRenewalTime(t *time.Time) *CycleRenewalUpdate {
	if t != nil {
		cru.SetRenewalTime(*t)
	}
	return cru
}

// ClearRenewalTime clears the value of the "renewal_time" field.
func (cru *CycleRenewalUpdate) ClearRenewalTime() *CycleRenewalUpdate {
	cru.mutation.ClearRenewalTime()
	return cru
}

// SetAutoRenewal sets the "auto_renewal" field.
func (cru *CycleRenewalUpdate) SetAutoRenewal(b bool) *CycleRenewalUpdate {
	cru.mutation.SetAutoRenewal(b)
	return cru
}

// Mutation returns the CycleRenewalMutation object of the builder.
func (cru *CycleRenewalUpdate) Mutation() *CycleRenewalMutation {
	return cru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cru *CycleRenewalUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cru.sqlSave, cru.mutation, cru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cru *CycleRenewalUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *CycleRenewalUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *CycleRenewalUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cru *CycleRenewalUpdate) check() error {
	if v, ok := cru.mutation.ResourceType(); ok {
		if err := cyclerenewal.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`ent: validator failed for field "CycleRenewal.resource_type": %w`, err)}
		}
	}
	if v, ok := cru.mutation.ProductName(); ok {
		if err := cyclerenewal.ProductNameValidator(v); err != nil {
			return &ValidationError{Name: "product_name", err: fmt.Errorf(`ent: validator failed for field "CycleRenewal.product_name": %w`, err)}
		}
	}
	if v, ok := cru.mutation.ProductDesc(); ok {
		if err := cyclerenewal.ProductDescValidator(v); err != nil {
			return &ValidationError{Name: "product_desc", err: fmt.Errorf(`ent: validator failed for field "CycleRenewal.product_desc": %w`, err)}
		}
	}
	return nil
}

func (cru *CycleRenewalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cyclerenewal.Table, cyclerenewal.Columns, sqlgraph.NewFieldSpec(cyclerenewal.FieldID, field.TypeUUID))
	if ps := cru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cru.mutation.FkUserID(); ok {
		_spec.SetField(cyclerenewal.FieldFkUserID, field.TypeUUID, value)
	}
	if value, ok := cru.mutation.ResourceID(); ok {
		_spec.SetField(cyclerenewal.FieldResourceID, field.TypeUUID, value)
	}
	if value, ok := cru.mutation.ResourceType(); ok {
		_spec.SetField(cyclerenewal.FieldResourceType, field.TypeInt, value)
	}
	if value, ok := cru.mutation.AddedResourceType(); ok {
		_spec.AddField(cyclerenewal.FieldResourceType, field.TypeInt, value)
	}
	if value, ok := cru.mutation.ProductName(); ok {
		_spec.SetField(cyclerenewal.FieldProductName, field.TypeString, value)
	}
	if value, ok := cru.mutation.ProductDesc(); ok {
		_spec.SetField(cyclerenewal.FieldProductDesc, field.TypeString, value)
	}
	if value, ok := cru.mutation.State(); ok {
		_spec.SetField(cyclerenewal.FieldState, field.TypeInt8, value)
	}
	if value, ok := cru.mutation.AddedState(); ok {
		_spec.AddField(cyclerenewal.FieldState, field.TypeInt8, value)
	}
	if value, ok := cru.mutation.ExtendDay(); ok {
		_spec.SetField(cyclerenewal.FieldExtendDay, field.TypeInt8, value)
	}
	if value, ok := cru.mutation.AddedExtendDay(); ok {
		_spec.AddField(cyclerenewal.FieldExtendDay, field.TypeInt8, value)
	}
	if value, ok := cru.mutation.ExtendPrice(); ok {
		_spec.SetField(cyclerenewal.FieldExtendPrice, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.AddedExtendPrice(); ok {
		_spec.AddField(cyclerenewal.FieldExtendPrice, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.DueTime(); ok {
		_spec.SetField(cyclerenewal.FieldDueTime, field.TypeTime, value)
	}
	if cru.mutation.DueTimeCleared() {
		_spec.ClearField(cyclerenewal.FieldDueTime, field.TypeTime)
	}
	if value, ok := cru.mutation.RenewalTime(); ok {
		_spec.SetField(cyclerenewal.FieldRenewalTime, field.TypeTime, value)
	}
	if cru.mutation.RenewalTimeCleared() {
		_spec.ClearField(cyclerenewal.FieldRenewalTime, field.TypeTime)
	}
	if value, ok := cru.mutation.AutoRenewal(); ok {
		_spec.SetField(cyclerenewal.FieldAutoRenewal, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cyclerenewal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cru.mutation.done = true
	return n, nil
}

// CycleRenewalUpdateOne is the builder for updating a single CycleRenewal entity.
type CycleRenewalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CycleRenewalMutation
}

// SetFkUserID sets the "fk_user_id" field.
func (cruo *CycleRenewalUpdateOne) SetFkUserID(u uuid.UUID) *CycleRenewalUpdateOne {
	cruo.mutation.SetFkUserID(u)
	return cruo
}

// SetResourceID sets the "resource_id" field.
func (cruo *CycleRenewalUpdateOne) SetResourceID(u uuid.UUID) *CycleRenewalUpdateOne {
	cruo.mutation.SetResourceID(u)
	return cruo
}

// SetResourceType sets the "resource_type" field.
func (cruo *CycleRenewalUpdateOne) SetResourceType(i int) *CycleRenewalUpdateOne {
	cruo.mutation.ResetResourceType()
	cruo.mutation.SetResourceType(i)
	return cruo
}

// AddResourceType adds i to the "resource_type" field.
func (cruo *CycleRenewalUpdateOne) AddResourceType(i int) *CycleRenewalUpdateOne {
	cruo.mutation.AddResourceType(i)
	return cruo
}

// SetProductName sets the "product_name" field.
func (cruo *CycleRenewalUpdateOne) SetProductName(s string) *CycleRenewalUpdateOne {
	cruo.mutation.SetProductName(s)
	return cruo
}

// SetProductDesc sets the "product_desc" field.
func (cruo *CycleRenewalUpdateOne) SetProductDesc(s string) *CycleRenewalUpdateOne {
	cruo.mutation.SetProductDesc(s)
	return cruo
}

// SetState sets the "state" field.
func (cruo *CycleRenewalUpdateOne) SetState(i int8) *CycleRenewalUpdateOne {
	cruo.mutation.ResetState()
	cruo.mutation.SetState(i)
	return cruo
}

// AddState adds i to the "state" field.
func (cruo *CycleRenewalUpdateOne) AddState(i int8) *CycleRenewalUpdateOne {
	cruo.mutation.AddState(i)
	return cruo
}

// SetExtendDay sets the "extend_day" field.
func (cruo *CycleRenewalUpdateOne) SetExtendDay(i int8) *CycleRenewalUpdateOne {
	cruo.mutation.ResetExtendDay()
	cruo.mutation.SetExtendDay(i)
	return cruo
}

// AddExtendDay adds i to the "extend_day" field.
func (cruo *CycleRenewalUpdateOne) AddExtendDay(i int8) *CycleRenewalUpdateOne {
	cruo.mutation.AddExtendDay(i)
	return cruo
}

// SetExtendPrice sets the "extend_price" field.
func (cruo *CycleRenewalUpdateOne) SetExtendPrice(f float64) *CycleRenewalUpdateOne {
	cruo.mutation.ResetExtendPrice()
	cruo.mutation.SetExtendPrice(f)
	return cruo
}

// AddExtendPrice adds f to the "extend_price" field.
func (cruo *CycleRenewalUpdateOne) AddExtendPrice(f float64) *CycleRenewalUpdateOne {
	cruo.mutation.AddExtendPrice(f)
	return cruo
}

// SetDueTime sets the "due_time" field.
func (cruo *CycleRenewalUpdateOne) SetDueTime(t time.Time) *CycleRenewalUpdateOne {
	cruo.mutation.SetDueTime(t)
	return cruo
}

// SetNillableDueTime sets the "due_time" field if the given value is not nil.
func (cruo *CycleRenewalUpdateOne) SetNillableDueTime(t *time.Time) *CycleRenewalUpdateOne {
	if t != nil {
		cruo.SetDueTime(*t)
	}
	return cruo
}

// ClearDueTime clears the value of the "due_time" field.
func (cruo *CycleRenewalUpdateOne) ClearDueTime() *CycleRenewalUpdateOne {
	cruo.mutation.ClearDueTime()
	return cruo
}

// SetRenewalTime sets the "renewal_time" field.
func (cruo *CycleRenewalUpdateOne) SetRenewalTime(t time.Time) *CycleRenewalUpdateOne {
	cruo.mutation.SetRenewalTime(t)
	return cruo
}

// SetNillableRenewalTime sets the "renewal_time" field if the given value is not nil.
func (cruo *CycleRenewalUpdateOne) SetNillableRenewalTime(t *time.Time) *CycleRenewalUpdateOne {
	if t != nil {
		cruo.SetRenewalTime(*t)
	}
	return cruo
}

// ClearRenewalTime clears the value of the "renewal_time" field.
func (cruo *CycleRenewalUpdateOne) ClearRenewalTime() *CycleRenewalUpdateOne {
	cruo.mutation.ClearRenewalTime()
	return cruo
}

// SetAutoRenewal sets the "auto_renewal" field.
func (cruo *CycleRenewalUpdateOne) SetAutoRenewal(b bool) *CycleRenewalUpdateOne {
	cruo.mutation.SetAutoRenewal(b)
	return cruo
}

// Mutation returns the CycleRenewalMutation object of the builder.
func (cruo *CycleRenewalUpdateOne) Mutation() *CycleRenewalMutation {
	return cruo.mutation
}

// Where appends a list predicates to the CycleRenewalUpdate builder.
func (cruo *CycleRenewalUpdateOne) Where(ps ...predicate.CycleRenewal) *CycleRenewalUpdateOne {
	cruo.mutation.Where(ps...)
	return cruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruo *CycleRenewalUpdateOne) Select(field string, fields ...string) *CycleRenewalUpdateOne {
	cruo.fields = append([]string{field}, fields...)
	return cruo
}

// Save executes the query and returns the updated CycleRenewal entity.
func (cruo *CycleRenewalUpdateOne) Save(ctx context.Context) (*CycleRenewal, error) {
	return withHooks(ctx, cruo.sqlSave, cruo.mutation, cruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *CycleRenewalUpdateOne) SaveX(ctx context.Context) *CycleRenewal {
	node, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruo *CycleRenewalUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *CycleRenewalUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cruo *CycleRenewalUpdateOne) check() error {
	if v, ok := cruo.mutation.ResourceType(); ok {
		if err := cyclerenewal.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`ent: validator failed for field "CycleRenewal.resource_type": %w`, err)}
		}
	}
	if v, ok := cruo.mutation.ProductName(); ok {
		if err := cyclerenewal.ProductNameValidator(v); err != nil {
			return &ValidationError{Name: "product_name", err: fmt.Errorf(`ent: validator failed for field "CycleRenewal.product_name": %w`, err)}
		}
	}
	if v, ok := cruo.mutation.ProductDesc(); ok {
		if err := cyclerenewal.ProductDescValidator(v); err != nil {
			return &ValidationError{Name: "product_desc", err: fmt.Errorf(`ent: validator failed for field "CycleRenewal.product_desc": %w`, err)}
		}
	}
	return nil
}

func (cruo *CycleRenewalUpdateOne) sqlSave(ctx context.Context) (_node *CycleRenewal, err error) {
	if err := cruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cyclerenewal.Table, cyclerenewal.Columns, sqlgraph.NewFieldSpec(cyclerenewal.FieldID, field.TypeUUID))
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CycleRenewal.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cyclerenewal.FieldID)
		for _, f := range fields {
			if !cyclerenewal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cyclerenewal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruo.mutation.FkUserID(); ok {
		_spec.SetField(cyclerenewal.FieldFkUserID, field.TypeUUID, value)
	}
	if value, ok := cruo.mutation.ResourceID(); ok {
		_spec.SetField(cyclerenewal.FieldResourceID, field.TypeUUID, value)
	}
	if value, ok := cruo.mutation.ResourceType(); ok {
		_spec.SetField(cyclerenewal.FieldResourceType, field.TypeInt, value)
	}
	if value, ok := cruo.mutation.AddedResourceType(); ok {
		_spec.AddField(cyclerenewal.FieldResourceType, field.TypeInt, value)
	}
	if value, ok := cruo.mutation.ProductName(); ok {
		_spec.SetField(cyclerenewal.FieldProductName, field.TypeString, value)
	}
	if value, ok := cruo.mutation.ProductDesc(); ok {
		_spec.SetField(cyclerenewal.FieldProductDesc, field.TypeString, value)
	}
	if value, ok := cruo.mutation.State(); ok {
		_spec.SetField(cyclerenewal.FieldState, field.TypeInt8, value)
	}
	if value, ok := cruo.mutation.AddedState(); ok {
		_spec.AddField(cyclerenewal.FieldState, field.TypeInt8, value)
	}
	if value, ok := cruo.mutation.ExtendDay(); ok {
		_spec.SetField(cyclerenewal.FieldExtendDay, field.TypeInt8, value)
	}
	if value, ok := cruo.mutation.AddedExtendDay(); ok {
		_spec.AddField(cyclerenewal.FieldExtendDay, field.TypeInt8, value)
	}
	if value, ok := cruo.mutation.ExtendPrice(); ok {
		_spec.SetField(cyclerenewal.FieldExtendPrice, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.AddedExtendPrice(); ok {
		_spec.AddField(cyclerenewal.FieldExtendPrice, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.DueTime(); ok {
		_spec.SetField(cyclerenewal.FieldDueTime, field.TypeTime, value)
	}
	if cruo.mutation.DueTimeCleared() {
		_spec.ClearField(cyclerenewal.FieldDueTime, field.TypeTime)
	}
	if value, ok := cruo.mutation.RenewalTime(); ok {
		_spec.SetField(cyclerenewal.FieldRenewalTime, field.TypeTime, value)
	}
	if cruo.mutation.RenewalTimeCleared() {
		_spec.ClearField(cyclerenewal.FieldRenewalTime, field.TypeTime)
	}
	if value, ok := cruo.mutation.AutoRenewal(); ok {
		_spec.SetField(cyclerenewal.FieldAutoRenewal, field.TypeBool, value)
	}
	_node = &CycleRenewal{config: cruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cyclerenewal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cruo.mutation.done = true
	return _node, nil
}
