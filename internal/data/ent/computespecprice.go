// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computespecprice"
)

// ComputeSpecPrice is the model entity for the ComputeSpecPrice schema.
type ComputeSpecPrice struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// 资源规格id
	FkComputeSpecID int32 `json:"fk_compute_spec_id,omitempty"`
	// 天数
	Day int32 `json:"day,omitempty"`
	// 此天数的价格
	Price        float32 `json:"price,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ComputeSpecPrice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case computespecprice.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case computespecprice.FieldID, computespecprice.FieldFkComputeSpecID, computespecprice.FieldDay:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ComputeSpecPrice fields.
func (csp *ComputeSpecPrice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case computespecprice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			csp.ID = int32(value.Int64)
		case computespecprice.FieldFkComputeSpecID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fk_compute_spec_id", values[i])
			} else if value.Valid {
				csp.FkComputeSpecID = int32(value.Int64)
			}
		case computespecprice.FieldDay:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field day", values[i])
			} else if value.Valid {
				csp.Day = int32(value.Int64)
			}
		case computespecprice.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				csp.Price = float32(value.Float64)
			}
		default:
			csp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ComputeSpecPrice.
// This includes values selected through modifiers, order, etc.
func (csp *ComputeSpecPrice) Value(name string) (ent.Value, error) {
	return csp.selectValues.Get(name)
}

// Update returns a builder for updating this ComputeSpecPrice.
// Note that you need to call ComputeSpecPrice.Unwrap() before calling this method if this ComputeSpecPrice
// was returned from a transaction, and the transaction was committed or rolled back.
func (csp *ComputeSpecPrice) Update() *ComputeSpecPriceUpdateOne {
	return NewComputeSpecPriceClient(csp.config).UpdateOne(csp)
}

// Unwrap unwraps the ComputeSpecPrice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (csp *ComputeSpecPrice) Unwrap() *ComputeSpecPrice {
	_tx, ok := csp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ComputeSpecPrice is not a transactional entity")
	}
	csp.config.driver = _tx.drv
	return csp
}

// String implements the fmt.Stringer.
func (csp *ComputeSpecPrice) String() string {
	var builder strings.Builder
	builder.WriteString("ComputeSpecPrice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", csp.ID))
	builder.WriteString("fk_compute_spec_id=")
	builder.WriteString(fmt.Sprintf("%v", csp.FkComputeSpecID))
	builder.WriteString(", ")
	builder.WriteString("day=")
	builder.WriteString(fmt.Sprintf("%v", csp.Day))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", csp.Price))
	builder.WriteByte(')')
	return builder.String()
}

// ComputeSpecPrices is a parsable slice of ComputeSpecPrice.
type ComputeSpecPrices []*ComputeSpecPrice
