// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cycletransaction"
)

// CycleTransaction is the model entity for the CycleTransaction schema.
type CycleTransaction struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// cycleId
	FkCycleID uuid.UUID `json:"fk_cycle_id,omitempty"`
	// 用户id
	FkUserID uuid.UUID `json:"fk_user_id,omitempty"`
	// fk_cycle_order_id
	FkCycleOrderID uuid.UUID `json:"fk_cycle_order_id,omitempty"`
	// fk_cycle_recharge_id
	FkCycleRechargeID uuid.UUID `json:"fk_cycle_recharge_id,omitempty"`
	// 操作
	Operation string `json:"operation,omitempty"`
	// symbol
	Symbol string `json:"symbol,omitempty"`
	// Cycle holds the value of the "cycle" field.
	Cycle float64 `json:"cycle,omitempty"`
	// 余额
	Balance float64 `json:"balance,omitempty"`
	// 操作时间
	OperationTime time.Time `json:"operation_time,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CycleTransaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cycletransaction.FieldCycle, cycletransaction.FieldBalance:
			values[i] = new(sql.NullFloat64)
		case cycletransaction.FieldOperation, cycletransaction.FieldSymbol:
			values[i] = new(sql.NullString)
		case cycletransaction.FieldOperationTime:
			values[i] = new(sql.NullTime)
		case cycletransaction.FieldID, cycletransaction.FieldFkCycleID, cycletransaction.FieldFkUserID, cycletransaction.FieldFkCycleOrderID, cycletransaction.FieldFkCycleRechargeID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CycleTransaction fields.
func (ct *CycleTransaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cycletransaction.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ct.ID = *value
			}
		case cycletransaction.FieldFkCycleID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fk_cycle_id", values[i])
			} else if value != nil {
				ct.FkCycleID = *value
			}
		case cycletransaction.FieldFkUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fk_user_id", values[i])
			} else if value != nil {
				ct.FkUserID = *value
			}
		case cycletransaction.FieldFkCycleOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fk_cycle_order_id", values[i])
			} else if value != nil {
				ct.FkCycleOrderID = *value
			}
		case cycletransaction.FieldFkCycleRechargeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fk_cycle_recharge_id", values[i])
			} else if value != nil {
				ct.FkCycleRechargeID = *value
			}
		case cycletransaction.FieldOperation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value.Valid {
				ct.Operation = value.String
			}
		case cycletransaction.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				ct.Symbol = value.String
			}
		case cycletransaction.FieldCycle:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cycle", values[i])
			} else if value.Valid {
				ct.Cycle = value.Float64
			}
		case cycletransaction.FieldBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				ct.Balance = value.Float64
			}
		case cycletransaction.FieldOperationTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field operation_time", values[i])
			} else if value.Valid {
				ct.OperationTime = value.Time
			}
		default:
			ct.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CycleTransaction.
// This includes values selected through modifiers, order, etc.
func (ct *CycleTransaction) Value(name string) (ent.Value, error) {
	return ct.selectValues.Get(name)
}

// Update returns a builder for updating this CycleTransaction.
// Note that you need to call CycleTransaction.Unwrap() before calling this method if this CycleTransaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (ct *CycleTransaction) Update() *CycleTransactionUpdateOne {
	return NewCycleTransactionClient(ct.config).UpdateOne(ct)
}

// Unwrap unwraps the CycleTransaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ct *CycleTransaction) Unwrap() *CycleTransaction {
	_tx, ok := ct.config.driver.(*txDriver)
	if !ok {
		panic("ent: CycleTransaction is not a transactional entity")
	}
	ct.config.driver = _tx.drv
	return ct
}

// String implements the fmt.Stringer.
func (ct *CycleTransaction) String() string {
	var builder strings.Builder
	builder.WriteString("CycleTransaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ct.ID))
	builder.WriteString("fk_cycle_id=")
	builder.WriteString(fmt.Sprintf("%v", ct.FkCycleID))
	builder.WriteString(", ")
	builder.WriteString("fk_user_id=")
	builder.WriteString(fmt.Sprintf("%v", ct.FkUserID))
	builder.WriteString(", ")
	builder.WriteString("fk_cycle_order_id=")
	builder.WriteString(fmt.Sprintf("%v", ct.FkCycleOrderID))
	builder.WriteString(", ")
	builder.WriteString("fk_cycle_recharge_id=")
	builder.WriteString(fmt.Sprintf("%v", ct.FkCycleRechargeID))
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(ct.Operation)
	builder.WriteString(", ")
	builder.WriteString("symbol=")
	builder.WriteString(ct.Symbol)
	builder.WriteString(", ")
	builder.WriteString("cycle=")
	builder.WriteString(fmt.Sprintf("%v", ct.Cycle))
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", ct.Balance))
	builder.WriteString(", ")
	builder.WriteString("operation_time=")
	builder.WriteString(ct.OperationTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CycleTransactions is a parsable slice of CycleTransaction.
type CycleTransactions []*CycleTransaction
