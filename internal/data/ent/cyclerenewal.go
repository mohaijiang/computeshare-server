// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cyclerenewal"
)

// CycleRenewal is the model entity for the CycleRenewal schema.
type CycleRenewal struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// 用户id
	FkUserID uuid.UUID `json:"fk_user_id,omitempty"`
	// 资源ID
	ResourceID uuid.UUID `json:"resource_id,omitempty"`
	// 资源类型
	ResourceType int `json:"resource_type,omitempty"`
	// 产品名字
	ProductName string `json:"product_name,omitempty"`
	// 产品描述
	ProductDesc string `json:"product_desc,omitempty"`
	// 状态
	State int8 `json:"state,omitempty"`
	// 延长时间
	ExtendDay int8 `json:"extend_day,omitempty"`
	// 额外的价格
	ExtendPrice float64 `json:"extend_price,omitempty"`
	// 到期时间
	DueTime *time.Time `json:"due_time,omitempty"`
	// 续费时间
	RenewalTime *time.Time `json:"renewal_time,omitempty"`
	// 自动续费
	AutoRenewal  bool `json:"auto_renewal,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CycleRenewal) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cyclerenewal.FieldAutoRenewal:
			values[i] = new(sql.NullBool)
		case cyclerenewal.FieldExtendPrice:
			values[i] = new(sql.NullFloat64)
		case cyclerenewal.FieldResourceType, cyclerenewal.FieldState, cyclerenewal.FieldExtendDay:
			values[i] = new(sql.NullInt64)
		case cyclerenewal.FieldProductName, cyclerenewal.FieldProductDesc:
			values[i] = new(sql.NullString)
		case cyclerenewal.FieldDueTime, cyclerenewal.FieldRenewalTime:
			values[i] = new(sql.NullTime)
		case cyclerenewal.FieldID, cyclerenewal.FieldFkUserID, cyclerenewal.FieldResourceID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CycleRenewal fields.
func (cr *CycleRenewal) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cyclerenewal.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cr.ID = *value
			}
		case cyclerenewal.FieldFkUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fk_user_id", values[i])
			} else if value != nil {
				cr.FkUserID = *value
			}
		case cyclerenewal.FieldResourceID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value != nil {
				cr.ResourceID = *value
			}
		case cyclerenewal.FieldResourceType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field resource_type", values[i])
			} else if value.Valid {
				cr.ResourceType = int(value.Int64)
			}
		case cyclerenewal.FieldProductName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_name", values[i])
			} else if value.Valid {
				cr.ProductName = value.String
			}
		case cyclerenewal.FieldProductDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_desc", values[i])
			} else if value.Valid {
				cr.ProductDesc = value.String
			}
		case cyclerenewal.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				cr.State = int8(value.Int64)
			}
		case cyclerenewal.FieldExtendDay:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field extend_day", values[i])
			} else if value.Valid {
				cr.ExtendDay = int8(value.Int64)
			}
		case cyclerenewal.FieldExtendPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field extend_price", values[i])
			} else if value.Valid {
				cr.ExtendPrice = value.Float64
			}
		case cyclerenewal.FieldDueTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_time", values[i])
			} else if value.Valid {
				cr.DueTime = new(time.Time)
				*cr.DueTime = value.Time
			}
		case cyclerenewal.FieldRenewalTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field renewal_time", values[i])
			} else if value.Valid {
				cr.RenewalTime = new(time.Time)
				*cr.RenewalTime = value.Time
			}
		case cyclerenewal.FieldAutoRenewal:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto_renewal", values[i])
			} else if value.Valid {
				cr.AutoRenewal = value.Bool
			}
		default:
			cr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CycleRenewal.
// This includes values selected through modifiers, order, etc.
func (cr *CycleRenewal) Value(name string) (ent.Value, error) {
	return cr.selectValues.Get(name)
}

// Update returns a builder for updating this CycleRenewal.
// Note that you need to call CycleRenewal.Unwrap() before calling this method if this CycleRenewal
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *CycleRenewal) Update() *CycleRenewalUpdateOne {
	return NewCycleRenewalClient(cr.config).UpdateOne(cr)
}

// Unwrap unwraps the CycleRenewal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *CycleRenewal) Unwrap() *CycleRenewal {
	_tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: CycleRenewal is not a transactional entity")
	}
	cr.config.driver = _tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *CycleRenewal) String() string {
	var builder strings.Builder
	builder.WriteString("CycleRenewal(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cr.ID))
	builder.WriteString("fk_user_id=")
	builder.WriteString(fmt.Sprintf("%v", cr.FkUserID))
	builder.WriteString(", ")
	builder.WriteString("resource_id=")
	builder.WriteString(fmt.Sprintf("%v", cr.ResourceID))
	builder.WriteString(", ")
	builder.WriteString("resource_type=")
	builder.WriteString(fmt.Sprintf("%v", cr.ResourceType))
	builder.WriteString(", ")
	builder.WriteString("product_name=")
	builder.WriteString(cr.ProductName)
	builder.WriteString(", ")
	builder.WriteString("product_desc=")
	builder.WriteString(cr.ProductDesc)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", cr.State))
	builder.WriteString(", ")
	builder.WriteString("extend_day=")
	builder.WriteString(fmt.Sprintf("%v", cr.ExtendDay))
	builder.WriteString(", ")
	builder.WriteString("extend_price=")
	builder.WriteString(fmt.Sprintf("%v", cr.ExtendPrice))
	builder.WriteString(", ")
	if v := cr.DueTime; v != nil {
		builder.WriteString("due_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := cr.RenewalTime; v != nil {
		builder.WriteString("renewal_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("auto_renewal=")
	builder.WriteString(fmt.Sprintf("%v", cr.AutoRenewal))
	builder.WriteByte(')')
	return builder.String()
}

// CycleRenewals is a parsable slice of CycleRenewal.
type CycleRenewals []*CycleRenewal
