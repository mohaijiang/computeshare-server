// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cycleredeemcode"
)

// CycleRedeemCode is the model entity for the CycleRedeemCode schema.
type CycleRedeemCode struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// 用户id
	FkUserID uuid.UUID `json:"fk_user_id,omitempty"`
	// 兑换码
	RedeemCode string `json:"redeem_code,omitempty"`
	// 兑换码对应的周期
	Cycle float64 `json:"cycle,omitempty"`
	// 状态
	State bool `json:"state,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 使用
	UseTime      time.Time `json:"use_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CycleRedeemCode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cycleredeemcode.FieldState:
			values[i] = new(sql.NullBool)
		case cycleredeemcode.FieldCycle:
			values[i] = new(sql.NullFloat64)
		case cycleredeemcode.FieldRedeemCode:
			values[i] = new(sql.NullString)
		case cycleredeemcode.FieldCreateTime, cycleredeemcode.FieldUseTime:
			values[i] = new(sql.NullTime)
		case cycleredeemcode.FieldID, cycleredeemcode.FieldFkUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CycleRedeemCode fields.
func (crc *CycleRedeemCode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cycleredeemcode.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				crc.ID = *value
			}
		case cycleredeemcode.FieldFkUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fk_user_id", values[i])
			} else if value != nil {
				crc.FkUserID = *value
			}
		case cycleredeemcode.FieldRedeemCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redeem_code", values[i])
			} else if value.Valid {
				crc.RedeemCode = value.String
			}
		case cycleredeemcode.FieldCycle:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cycle", values[i])
			} else if value.Valid {
				crc.Cycle = value.Float64
			}
		case cycleredeemcode.FieldState:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				crc.State = value.Bool
			}
		case cycleredeemcode.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				crc.CreateTime = value.Time
			}
		case cycleredeemcode.FieldUseTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field use_time", values[i])
			} else if value.Valid {
				crc.UseTime = value.Time
			}
		default:
			crc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CycleRedeemCode.
// This includes values selected through modifiers, order, etc.
func (crc *CycleRedeemCode) Value(name string) (ent.Value, error) {
	return crc.selectValues.Get(name)
}

// Update returns a builder for updating this CycleRedeemCode.
// Note that you need to call CycleRedeemCode.Unwrap() before calling this method if this CycleRedeemCode
// was returned from a transaction, and the transaction was committed or rolled back.
func (crc *CycleRedeemCode) Update() *CycleRedeemCodeUpdateOne {
	return NewCycleRedeemCodeClient(crc.config).UpdateOne(crc)
}

// Unwrap unwraps the CycleRedeemCode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (crc *CycleRedeemCode) Unwrap() *CycleRedeemCode {
	_tx, ok := crc.config.driver.(*txDriver)
	if !ok {
		panic("ent: CycleRedeemCode is not a transactional entity")
	}
	crc.config.driver = _tx.drv
	return crc
}

// String implements the fmt.Stringer.
func (crc *CycleRedeemCode) String() string {
	var builder strings.Builder
	builder.WriteString("CycleRedeemCode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", crc.ID))
	builder.WriteString("fk_user_id=")
	builder.WriteString(fmt.Sprintf("%v", crc.FkUserID))
	builder.WriteString(", ")
	builder.WriteString("redeem_code=")
	builder.WriteString(crc.RedeemCode)
	builder.WriteString(", ")
	builder.WriteString("cycle=")
	builder.WriteString(fmt.Sprintf("%v", crc.Cycle))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", crc.State))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(crc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("use_time=")
	builder.WriteString(crc.UseTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CycleRedeemCodes is a parsable slice of CycleRedeemCode.
type CycleRedeemCodes []*CycleRedeemCode
