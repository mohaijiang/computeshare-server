// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cycle"
)

// CycleCreate is the builder for creating a Cycle entity.
type CycleCreate struct {
	config
	mutation *CycleMutation
	hooks    []Hook
}

// SetFkUserID sets the "fk_user_id" field.
func (cc *CycleCreate) SetFkUserID(u uuid.UUID) *CycleCreate {
	cc.mutation.SetFkUserID(u)
	return cc
}

// SetCycle sets the "cycle" field.
func (cc *CycleCreate) SetCycle(f float64) *CycleCreate {
	cc.mutation.SetCycle(f)
	return cc
}

// SetCreateTime sets the "create_time" field.
func (cc *CycleCreate) SetCreateTime(t time.Time) *CycleCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetUpdateTime sets the "update_time" field.
func (cc *CycleCreate) SetUpdateTime(t time.Time) *CycleCreate {
	cc.mutation.SetUpdateTime(t)
	return cc
}

// SetID sets the "id" field.
func (cc *CycleCreate) SetID(u uuid.UUID) *CycleCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CycleCreate) SetNillableID(u *uuid.UUID) *CycleCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// Mutation returns the CycleMutation object of the builder.
func (cc *CycleCreate) Mutation() *CycleMutation {
	return cc.mutation
}

// Save creates the Cycle in the database.
func (cc *CycleCreate) Save(ctx context.Context) (*Cycle, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CycleCreate) SaveX(ctx context.Context) *Cycle {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CycleCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CycleCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CycleCreate) defaults() {
	if _, ok := cc.mutation.ID(); !ok {
		v := cycle.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CycleCreate) check() error {
	if _, ok := cc.mutation.FkUserID(); !ok {
		return &ValidationError{Name: "fk_user_id", err: errors.New(`ent: missing required field "Cycle.fk_user_id"`)}
	}
	if _, ok := cc.mutation.Cycle(); !ok {
		return &ValidationError{Name: "cycle", err: errors.New(`ent: missing required field "Cycle.cycle"`)}
	}
	if _, ok := cc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Cycle.create_time"`)}
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Cycle.update_time"`)}
	}
	return nil
}

func (cc *CycleCreate) sqlSave(ctx context.Context) (*Cycle, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CycleCreate) createSpec() (*Cycle, *sqlgraph.CreateSpec) {
	var (
		_node = &Cycle{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(cycle.Table, sqlgraph.NewFieldSpec(cycle.FieldID, field.TypeUUID))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.FkUserID(); ok {
		_spec.SetField(cycle.FieldFkUserID, field.TypeUUID, value)
		_node.FkUserID = value
	}
	if value, ok := cc.mutation.Cycle(); ok {
		_spec.SetField(cycle.FieldCycle, field.TypeFloat64, value)
		_node.Cycle = value
	}
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.SetField(cycle.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.SetField(cycle.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// CycleCreateBulk is the builder for creating many Cycle entities in bulk.
type CycleCreateBulk struct {
	config
	builders []*CycleCreate
}

// Save creates the Cycle entities in the database.
func (ccb *CycleCreateBulk) Save(ctx context.Context) ([]*Cycle, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Cycle, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CycleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CycleCreateBulk) SaveX(ctx context.Context) []*Cycle {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CycleCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CycleCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
